
F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008574  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087bc  080087bc  0000a14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080087bc  080087bc  000097bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c4  080087c4  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c4  080087c4  000097c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087c8  080087c8  000097c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  080087cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a14c  2**0
                  CONTENTS
 10 .bss          00001dfc  2000014c  2000014c  0000a14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f48  20001f48  0000a14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c9a  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003627  00000000  00000000  0001de16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00021440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ced  00000000  00000000  00022548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024782  00000000  00000000  00023235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017626  00000000  00000000  000479b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc50  00000000  00000000  0005efdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ac2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b24  00000000  00000000  0012ac70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0012f794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086ec 	.word	0x080086ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080086ec 	.word	0x080086ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_X_CUBE_NFC6_Init>:
/* Global variables ----------------------------------------------------------*/

uint8_t globalCommProtectCnt = 0;   /*!< Global Protection counter     */

void MX_X_CUBE_NFC6_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NFC6_Library_Init_PreTreatment */

  /* USER CODE END NFC6_Library_Init_PreTreatment */

  /* Initialize the peripherals and the NFC6 components */
  MX_NFC6_PollingDemo_Init();
 80005a0:	f000 f802 	bl	80005a8 <MX_NFC6_PollingDemo_Init>

  /* USER CODE BEGIN NFC6_Library_Init_PostTreatment */

  /* USER CODE END NFC6_Library_Init_PostTreatment */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MX_NFC6_PollingDemo_Init>:
//    demoCycle(); //todo

}

void MX_NFC6_PollingDemo_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
//  (void)HAL_EXTI_RegisterCallback(&USR_INT_LINE, HAL_EXTI_COMMON_CB_ID, BSP_NFC0XCOMM_IRQ_Callback);
//
#ifdef ST25R3916
  platformLog("Welcome to X-NUCLEO-NFC06A1\r\n");
#else
  platformLog("Welcome to X-NUCLEO-NFC08A1\r\n");
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <MX_NFC6_PollingDemo_Init+0x10>)
 80005ae:	f006 ff91 	bl	80074d4 <usb_printf>
//    {
//      platformDelay(200);
//    }
//    platformLog("Initialization succeeded GO..\r\n");
//  }
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08008704 	.word	0x08008704

080005bc <SPI1_Transmit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SPI1_Transmit(uint8_t* data, uint16_t size) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	807b      	strh	r3, [r7, #2]
    // Transmit data via SPI1 using the HAL_SPI_Transmit function
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK) {
 80005c8:	887a      	ldrh	r2, [r7, #2]
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <SPI1_Transmit+0x2c>)
 80005d2:	f003 f812 	bl	80035fa <HAL_SPI_Transmit>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SPI1_Transmit+0x24>
        // Transmission failed
        Error_Handler();
 80005dc:	f000 fa1a 	bl	8000a14 <Error_Handler>
    }
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200001bc 	.word	0x200001bc

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fba1 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f82b 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8f7 	bl	80007ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80005fe:	f000 f891 	bl	8000724 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000602:	f000 f8bd 	bl	8000780 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000606:	f006 fe51 	bl	80072ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(700);
 800060a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800060e:	f000 fc05 	bl	8000e1c <HAL_Delay>
  // Example data to send
  uint8_t spiData[] = {0xAA, 0xBB, 0xCC};
 8000612:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <main+0x5c>)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	4611      	mov	r1, r2
 800061a:	8019      	strh	r1, [r3, #0]
 800061c:	3302      	adds	r3, #2
 800061e:	0c12      	lsrs	r2, r2, #16
 8000620:	701a      	strb	r2, [r3, #0]

  // Send data over SPI
  SPI1_Transmit(spiData, sizeof(spiData));
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2103      	movs	r1, #3
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffc8 	bl	80005bc <SPI1_Transmit>


	MX_X_CUBE_NFC6_Init();
 800062c:	f7ff ffb6 	bl	800059c <MX_X_CUBE_NFC6_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* Toggle the state of LD5_Pin */
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000630:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <main+0x60>)
 8000636:	f000 fefe 	bl	8001436 <HAL_GPIO_TogglePin>
//	uint8_t UserTxBuffer[] = "STM32 Virtual COM Port Driver \r\n";
//
//
//	usb_printf("%s\r\n",UserTxBuffer);
	/* Delay for 1 second (1000 milliseconds) */
	HAL_Delay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063e:	f000 fbed 	bl	8000e1c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000642:	bf00      	nop
 8000644:	e7f4      	b.n	8000630 <main+0x44>
 8000646:	bf00      	nop
 8000648:	08008724 	.word	0x08008724
 800064c:	40020c00 	.word	0x40020c00

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 fbe0 	bl	8007e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fa82 	bl	8002be0 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f997 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fce3 	bl	80030d0 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000710:	f000 f980 	bl	8000a14 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	@ 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 fea7 	bl	80014b4 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f952 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000168 	.word	0x20000168
 8000778:	40005400 	.word	0x40005400
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_SPI1_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <MX_SPI1_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_SPI1_Init+0x64>)
 80007d2:	f002 fe89 	bl	80034e8 <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 f91a 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200001bc 	.word	0x200001bc
 80007e8:	40013000 	.word	0x40013000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b7e      	ldr	r3, [pc, #504]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a7d      	ldr	r2, [pc, #500]	@ (8000a00 <MX_GPIO_Init+0x214>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b7b      	ldr	r3, [pc, #492]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b77      	ldr	r3, [pc, #476]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a76      	ldr	r2, [pc, #472]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b74      	ldr	r3, [pc, #464]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b70      	ldr	r3, [pc, #448]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a6f      	ldr	r2, [pc, #444]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a00 <MX_GPIO_Init+0x214>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b69      	ldr	r3, [pc, #420]	@ (8000a00 <MX_GPIO_Init+0x214>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a68      	ldr	r2, [pc, #416]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b62      	ldr	r3, [pc, #392]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a61      	ldr	r2, [pc, #388]	@ (8000a00 <MX_GPIO_Init+0x214>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b5f      	ldr	r3, [pc, #380]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b5b      	ldr	r3, [pc, #364]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a5a      	ldr	r2, [pc, #360]	@ (8000a00 <MX_GPIO_Init+0x214>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b58      	ldr	r3, [pc, #352]	@ (8000a00 <MX_GPIO_Init+0x214>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	4855      	ldr	r0, [pc, #340]	@ (8000a04 <MX_GPIO_Init+0x218>)
 80008b0:	f000 fda8 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	4853      	ldr	r0, [pc, #332]	@ (8000a08 <MX_GPIO_Init+0x21c>)
 80008ba:	f000 fda3 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008c4:	4851      	ldr	r0, [pc, #324]	@ (8000a0c <MX_GPIO_Init+0x220>)
 80008c6:	f000 fd9d 	bl	8001404 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4848      	ldr	r0, [pc, #288]	@ (8000a04 <MX_GPIO_Init+0x218>)
 80008e2:	f000 fbf3 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4842      	ldr	r0, [pc, #264]	@ (8000a08 <MX_GPIO_Init+0x21c>)
 80008fe:	f000 fbe5 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	483a      	ldr	r0, [pc, #232]	@ (8000a08 <MX_GPIO_Init+0x21c>)
 800091e:	f000 fbd5 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4836      	ldr	r0, [pc, #216]	@ (8000a10 <MX_GPIO_Init+0x224>)
 8000938:	f000 fbc8 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4830      	ldr	r0, [pc, #192]	@ (8000a10 <MX_GPIO_Init+0x224>)
 8000950:	f000 fbbc 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4827      	ldr	r0, [pc, #156]	@ (8000a10 <MX_GPIO_Init+0x224>)
 8000972:	f000 fbab 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000976:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800097a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481f      	ldr	r0, [pc, #124]	@ (8000a0c <MX_GPIO_Init+0x220>)
 8000990:	f000 fb9c 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000994:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a6:	2306      	movs	r3, #6
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4815      	ldr	r0, [pc, #84]	@ (8000a08 <MX_GPIO_Init+0x21c>)
 80009b2:	f000 fb8b 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b6:	2320      	movs	r3, #32
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <MX_GPIO_Init+0x220>)
 80009ca:	f000 fb7f 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <MX_GPIO_Init+0x218>)
 80009e4:	f000 fb72 	bl	80010cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2006      	movs	r0, #6
 80009ee:	f000 fb14 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f2:	2006      	movs	r0, #6
 80009f4:	f000 fb2d 	bl	8001052 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	bf00      	nop
 80009fa:	3730      	adds	r7, #48	@ 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020400 	.word	0x40020400

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <Error_Handler+0x8>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fad0 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <HAL_I2C_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12c      	bne.n	8000aec <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	@ (8000afc <HAL_I2C_MspInit+0x8c>)
 8000acc:	f000 fafe 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ada:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	@ 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40005400 	.word	0x40005400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a25      	ldr	r2, [pc, #148]	@ (8000bb4 <HAL_SPI_MspInit+0xb4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d143      	bne.n	8000baa <HAL_SPI_MspInit+0xaa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <HAL_SPI_MspInit+0xb8>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <HAL_SPI_MspInit+0xb8>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <HAL_SPI_MspInit+0xb8>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <HAL_SPI_MspInit+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb8 <HAL_SPI_MspInit+0xb8>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <HAL_SPI_MspInit+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4811      	ldr	r0, [pc, #68]	@ (8000bbc <HAL_SPI_MspInit+0xbc>)
 8000b76:	f000 faa9 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b7a:	23e0      	movs	r3, #224	@ 0xe0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <HAL_SPI_MspInit+0xbc>)
 8000b96:	f000 fa99 	bl	80010cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2023      	movs	r0, #35	@ 0x23
 8000ba0:	f000 fa3b 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ba4:	2023      	movs	r0, #35	@ 0x23
 8000ba6:	f000 fa54 	bl	8001052 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f8e1 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 fc22 	bl	800146c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <SPI1_IRQHandler+0x10>)
 8000c32:	f002 fe27 	bl	8003884 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001bc 	.word	0x200001bc

08000c40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <OTG_FS_IRQHandler+0x10>)
 8000c46:	f000 febd 	bl	80019c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200016fc 	.word	0x200016fc

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f007 f8d6 	bl	8007e34 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20020000 	.word	0x20020000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000214 	.word	0x20000214
 8000cbc:	20001f48 	.word	0x20001f48

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f007 f895 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc69 	bl	80005ec <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000d28:	080087cc 	.word	0x080087cc
  ldr r2, =_sbss
 8000d2c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d30:	20001f48 	.word	0x20001f48

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f94f 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe58 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f967 	bl	800106e <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f92f 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000218 	.word	0x20000218

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000218 	.word	0x20000218

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d004      	beq.n	80010a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e00c      	b.n	80010be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2205      	movs	r2, #5
 80010a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e16b      	b.n	80013c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 815a 	bne.w	80013ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d005      	beq.n	800111e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	2b02      	cmp	r3, #2
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d017      	beq.n	80011bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d123      	bne.n	8001210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	69b9      	ldr	r1, [r7, #24]
 800120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0203 	and.w	r2, r3, #3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80b4 	beq.w	80013ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b60      	ldr	r3, [pc, #384]	@ (80013d8 <HAL_GPIO_Init+0x30c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a5f      	ldr	r2, [pc, #380]	@ (80013d8 <HAL_GPIO_Init+0x30c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b5d      	ldr	r3, [pc, #372]	@ (80013d8 <HAL_GPIO_Init+0x30c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a5b      	ldr	r2, [pc, #364]	@ (80013dc <HAL_GPIO_Init+0x310>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	@ (80013e0 <HAL_GPIO_Init+0x314>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a51      	ldr	r2, [pc, #324]	@ (80013e4 <HAL_GPIO_Init+0x318>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x222>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a50      	ldr	r2, [pc, #320]	@ (80013e8 <HAL_GPIO_Init+0x31c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x21e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	@ (80013ec <HAL_GPIO_Init+0x320>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x21a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	@ (80013f0 <HAL_GPIO_Init+0x324>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x216>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	@ (80013f4 <HAL_GPIO_Init+0x328>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x212>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	@ (80013f8 <HAL_GPIO_Init+0x32c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x20e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	@ (80013fc <HAL_GPIO_Init+0x330>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x20a>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00e      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012d6:	2308      	movs	r3, #8
 80012d8:	e00c      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00a      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012de:	2305      	movs	r3, #5
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012f2:	2300      	movs	r3, #0
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	f002 0203 	and.w	r2, r2, #3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	@ (80013dc <HAL_GPIO_Init+0x310>)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001336:	4a32      	ldr	r2, [pc, #200]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_GPIO_Init+0x334>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001360:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138a:	4a1d      	ldr	r2, [pc, #116]	@ (8001400 <HAL_GPIO_Init+0x334>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <HAL_GPIO_Init+0x334>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <HAL_GPIO_Init+0x334>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	f67f ae90 	bls.w	80010e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	041a      	lsls	r2, r3, #16
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43d9      	mvns	r1, r3
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	400b      	ands	r3, r1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f806 	bl	800149c <HAL_GPIO_EXTI_Callback>
  }
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e12b      	b.n	800171e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fac8 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2224      	movs	r2, #36	@ 0x24
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001518:	f001 ffd2 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a81      	ldr	r2, [pc, #516]	@ (8001728 <HAL_I2C_Init+0x274>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d807      	bhi.n	8001538 <HAL_I2C_Init+0x84>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a80      	ldr	r2, [pc, #512]	@ (800172c <HAL_I2C_Init+0x278>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e006      	b.n	8001546 <HAL_I2C_Init+0x92>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a7d      	ldr	r2, [pc, #500]	@ (8001730 <HAL_I2C_Init+0x27c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0e7      	b.n	800171e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4a78      	ldr	r2, [pc, #480]	@ (8001734 <HAL_I2C_Init+0x280>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a6a      	ldr	r2, [pc, #424]	@ (8001728 <HAL_I2C_Init+0x274>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d802      	bhi.n	8001588 <HAL_I2C_Init+0xd4>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3301      	adds	r3, #1
 8001586:	e009      	b.n	800159c <HAL_I2C_Init+0xe8>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a69      	ldr	r2, [pc, #420]	@ (8001738 <HAL_I2C_Init+0x284>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	3301      	adds	r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	495c      	ldr	r1, [pc, #368]	@ (8001728 <HAL_I2C_Init+0x274>)
 80015b8:	428b      	cmp	r3, r1
 80015ba:	d819      	bhi.n	80015f0 <HAL_I2C_Init+0x13c>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e59      	subs	r1, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_I2C_Init+0x138>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e59      	subs	r1, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	e051      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e04f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <HAL_I2C_Init+0x168>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	e012      	b.n	8001642 <HAL_I2C_Init+0x18e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Init+0x196>
 8001646:	2301      	movs	r3, #1
 8001648:	e022      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <HAL_I2C_Init+0x1bc>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e58      	subs	r0, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	440b      	add	r3, r1
 8001660:	fbb0 f3f3 	udiv	r3, r0, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800166e:	e00f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e58      	subs	r0, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	6809      	ldr	r1, [r1, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6911      	ldr	r1, [r2, #16]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68d2      	ldr	r2, [r2, #12]
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	000186a0 	.word	0x000186a0
 800172c:	001e847f 	.word	0x001e847f
 8001730:	003d08ff 	.word	0x003d08ff
 8001734:	431bde83 	.word	0x431bde83
 8001738:	10624dd3 	.word	0x10624dd3

0800173c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
 8001742:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e101      	b.n	8001952 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d106      	bne.n	800176e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f005 ffe3 	bl	8007734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800177c:	d102      	bne.n	8001784 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fb8c 	bl	8003ea6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7c1a      	ldrb	r2, [r3, #16]
 8001796:	f88d 2000 	strb.w	r2, [sp]
 800179a:	3304      	adds	r3, #4
 800179c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179e:	f002 fa6b 	bl	8003c78 <USB_CoreInit>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0ce      	b.n	8001952 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fb84 	bl	8003ec8 <USB_SetCurrentMode>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0bf      	b.n	8001952 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e04a      	b.n	800186e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3315      	adds	r3, #21
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3314      	adds	r3, #20
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	b298      	uxth	r0, r3
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	332e      	adds	r3, #46	@ 0x2e
 8001814:	4602      	mov	r2, r0
 8001816:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3318      	adds	r3, #24
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	331c      	adds	r3, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3320      	adds	r3, #32
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3324      	adds	r3, #36	@ 0x24
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	791b      	ldrb	r3, [r3, #4]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3af      	bcc.n	80017d8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e044      	b.n	8001908 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3301      	adds	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3b5      	bcc.n	800187e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7c1a      	ldrb	r2, [r3, #16]
 800191a:	f88d 2000 	strb.w	r2, [sp]
 800191e:	3304      	adds	r3, #4
 8001920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001922:	f002 fb1d 	bl	8003f60 <USB_DevInit>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e00c      	b.n	8001952 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fb67 	bl	800501e <USB_DevDisconnect>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_PCD_Start+0x1c>
 8001972:	2302      	movs	r3, #2
 8001974:	e022      	b.n	80019bc <HAL_PCD_Start+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001996:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fa6e 	bl	8003e84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 fb15 	bl	8004fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b08d      	sub	sp, #52	@ 0x34
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fbd3 	bl	8005186 <USB_GetMode>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 848c 	bne.w	8002300 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fb37 	bl	8005060 <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8482 	beq.w	80022fe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fb24 	bl	8005060 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d107      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f002 0202 	and.w	r2, r2, #2
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fb12 	bl	8005060 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d161      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0210 	bic.w	r2, r2, #16
 8001a54:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 020f 	and.w	r2, r3, #15
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a80:	d124      	bne.n	8001acc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d035      	beq.n	8001afa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6a38      	ldr	r0, [r7, #32]
 8001aa2:	f003 f949 	bl	8004d38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab2:	441a      	add	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac4:	441a      	add	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	615a      	str	r2, [r3, #20]
 8001aca:	e016      	b.n	8001afa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001ad2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001ad6:	d110      	bne.n	8001afa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ade:	2208      	movs	r2, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6a38      	ldr	r0, [r7, #32]
 8001ae4:	f003 f928 	bl	8004d38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001af4:	441a      	add	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0210 	orr.w	r2, r2, #16
 8001b08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 faa6 	bl	8005060 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b1e:	f040 80a7 	bne.w	8001c70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 faab 	bl	8005086 <USB_ReadDevAllOutEpInterrupt>
 8001b30:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b32:	e099      	b.n	8001c68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 808e 	beq.w	8001c5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 facf 	bl	80050ee <USB_ReadDevOutEPInterrupt>
 8001b50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00c      	beq.n	8001b76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fea3 	bl	80028bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00c      	beq.n	8001b9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2308      	movs	r3, #8
 8001b90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 ff79 	bl	8002a8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d030      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc8:	2b80      	cmp	r3, #128	@ 0x80
 8001bca:	d109      	bne.n	8001be0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bde:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f005 fea6 	bl	800795c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2302      	movs	r3, #2
 8001c20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d009      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c54:	461a      	mov	r2, r3
 8001c56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	3301      	adds	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f af62 	bne.w	8001b34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 f9f3 	bl	8005060 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c84:	f040 80db 	bne.w	8001e3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fa14 	bl	80050ba <USB_ReadDevAllInEpInterrupt>
 8001c92:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001c98:	e0cd      	b.n	8001e36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80c2 	beq.w	8001e2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fa3a 	bl	800512a <USB_ReadDevInEPInterrupt>
 8001cb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d057      	beq.n	8001d72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	2201      	movs	r2, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69f9      	ldr	r1, [r7, #28]
 8001cde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	799b      	ldrb	r3, [r3, #6]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d132      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3320      	adds	r3, #32
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4403      	add	r3, r0
 8001d20:	331c      	adds	r3, #28
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4419      	add	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4403      	add	r3, r0
 8001d34:	3320      	adds	r3, #32
 8001d36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d113      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x3a2>
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3324      	adds	r3, #36	@ 0x24
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2101      	movs	r1, #1
 8001d62:	f003 fa41 	bl	80051e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f005 fd70 	bl	8007852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001da4:	461a      	mov	r2, r3
 8001da6:	2310      	movs	r3, #16
 8001da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2340      	movs	r3, #64	@ 0x40
 8001dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dd2:	6a38      	ldr	r0, [r7, #32]
 8001dd4:	f002 fa28 	bl	8004228 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	3310      	adds	r3, #16
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	78db      	ldrb	r3, [r3, #3]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d108      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2200      	movs	r2, #0
 8001df8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f005 fdbd 	bl	8007980 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e12:	461a      	mov	r2, r3
 8001e14:	2302      	movs	r3, #2
 8001e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fcbd 	bl	80027a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f47f af2e 	bne.w	8001c9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f90c 	bl	8005060 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e52:	d122      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fea3 	bl	8002bc8 <HAL_PCDEx_LPM_Callback>
 8001e82:	e002      	b.n	8001e8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f005 fd5b 	bl	8007940 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 f8de 	bl	8005060 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eae:	d112      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d102      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f005 fd17 	bl	80078f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ed4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f8c0 	bl	8005060 <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eea:	f040 80b7 	bne.w	800205c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2110      	movs	r1, #16
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 f98d 	bl	8004228 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f12:	e046      	b.n	8001fa2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f20:	461a      	mov	r2, r3
 8001f22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f38:	0151      	lsls	r1, r2, #5
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	440a      	add	r2, r1
 8001f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001f42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f54:	461a      	mov	r2, r3
 8001f56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f8c:	0151      	lsls	r1, r2, #5
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	440a      	add	r2, r1
 8001f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	791b      	ldrb	r3, [r3, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d3b2      	bcc.n	8001f14 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fbc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001fc0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7bdb      	ldrb	r3, [r3, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fda:	f043 030b 	orr.w	r3, r3, #11
 8001fde:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ff0:	f043 030b 	orr.w	r3, r3, #11
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	e015      	b.n	8002024 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002006:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800200a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800200e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800201e:	f043 030b 	orr.w	r3, r3, #11
 8002022:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002032:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002036:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002046:	461a      	mov	r2, r3
 8002048:	f003 f8ce 	bl	80051e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800205a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fffd 	bl	8005060 <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002070:	d123      	bne.n	80020ba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 f893 	bl	80051a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f002 f94a 	bl	800431a <USB_GetDevSpeed>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681c      	ldr	r4, [r3, #0]
 8002092:	f001 fa09 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 8002096:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800209c:	461a      	mov	r2, r3
 800209e:	4620      	mov	r0, r4
 80020a0:	f001 fe4e 	bl	8003d40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f005 fbfc 	bl	80078a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80020b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 ffce 	bl	8005060 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d10a      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f005 fbd9 	bl	8007886 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f002 0208 	and.w	r2, r2, #8
 80020e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 ffb9 	bl	8005060 <USB_ReadInterrupts>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f4:	2b80      	cmp	r3, #128	@ 0x80
 80020f6:	d123      	bne.n	8002140 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002104:	2301      	movs	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
 8002108:	e014      	b.n	8002134 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fb0a 	bl	8002742 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	791b      	ldrb	r3, [r3, #4]
 8002138:	461a      	mov	r2, r3
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	4293      	cmp	r3, r2
 800213e:	d3e4      	bcc.n	800210a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f002 ff8b 	bl	8005060 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002150:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002154:	d13c      	bne.n	80021d0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	e02b      	b.n	80021b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3318      	adds	r3, #24
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d115      	bne.n	80021ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002182:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	da12      	bge.n	80021ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3317      	adds	r3, #23
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 faca 	bl	8002742 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	3301      	adds	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	461a      	mov	r2, r3
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	4293      	cmp	r3, r2
 80021be:	d3cd      	bcc.n	800215c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80021ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 ff43 	bl	8005060 <USB_ReadInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021e4:	d156      	bne.n	8002294 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ea:	e045      	b.n	8002278 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d12e      	bne.n	8002272 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002214:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	da2b      	bge.n	8002272 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002226:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800222a:	429a      	cmp	r2, r3
 800222c:	d121      	bne.n	8002272 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800226a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226e:	6053      	str	r3, [r2, #4]
            break;
 8002270:	e008      	b.n	8002284 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	3301      	adds	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	461a      	mov	r2, r3
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	4293      	cmp	r3, r2
 8002282:	d3b3      	bcc.n	80021ec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fee1 	bl	8005060 <USB_ReadInterrupts>
 800229e:	4603      	mov	r3, r0
 80022a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a8:	d10a      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f005 fb7a 	bl	80079a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fecb 	bl	8005060 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d115      	bne.n	8002300 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f005 fb6a 	bl	80079c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	e000      	b.n	8002300 <HAL_PCD_IRQHandler+0x93c>
      return;
 80022fe:	bf00      	nop
    }
  }
}
 8002300:	3734      	adds	r7, #52	@ 0x34
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}

08002306 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_PCD_SetAddress+0x1a>
 800231c:	2302      	movs	r3, #2
 800231e:	e012      	b.n	8002346 <HAL_PCD_SetAddress+0x40>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fe2a 	bl	8004f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	461a      	mov	r2, r3
 800235c:	4603      	mov	r3, r0
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	460b      	mov	r3, r1
 8002362:	803b      	strh	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0f      	bge.n	8002394 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3310      	adds	r3, #16
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00f      	b.n	80023b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80023c0:	883b      	ldrh	r3, [r7, #0]
 80023c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	78ba      	ldrb	r2, [r7, #2]
 80023ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e2:	78bb      	ldrb	r3, [r7, #2]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d102      	bne.n	80023ee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_PCD_EP_Open+0xae>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e00e      	b.n	800241a <HAL_PCD_EP_Open+0xcc>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	4618      	mov	r0, r3
 800240c:	f001 ffaa 	bl	8004364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002418:	7afb      	ldrb	r3, [r7, #11]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800242e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	da0f      	bge.n	8002456 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	3310      	adds	r3, #16
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	705a      	strb	r2, [r3, #1]
 8002454:	e00f      	b.n	8002476 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_Close+0x6e>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_Close+0x8c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 ffe8 	bl	8004474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	460b      	mov	r3, r1
 80024c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	799b      	ldrb	r3, [r3, #6]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	799b      	ldrb	r3, [r3, #6]
 800251a:	461a      	mov	r2, r3
 800251c:	6979      	ldr	r1, [r7, #20]
 800251e:	f002 f885 	bl	800462c <USB_EPStartXfer>

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256c:	7afb      	ldrb	r3, [r7, #11]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3310      	adds	r3, #16
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2201      	movs	r2, #1
 800259a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259c:	7afb      	ldrb	r3, [r7, #11]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	799b      	ldrb	r3, [r3, #6]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	799b      	ldrb	r3, [r3, #6]
 80025be:	461a      	mov	r2, r3
 80025c0:	6979      	ldr	r1, [r7, #20]
 80025c2:	f002 f833 	bl	800462c <USB_EPStartXfer>

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	7912      	ldrb	r2, [r2, #4]
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e04f      	b.n	800268e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da0f      	bge.n	8002616 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	3310      	adds	r3, #16
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	3304      	adds	r3, #4
 800260c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	705a      	strb	r2, [r3, #1]
 8002614:	e00d      	b.n	8002632 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	3304      	adds	r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_PCD_EP_SetStall+0x82>
 800264e:	2302      	movs	r3, #2
 8002650:	e01d      	b.n	800268e <HAL_PCD_EP_SetStall+0xbe>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	4618      	mov	r0, r3
 8002662:	f002 fbc1 	bl	8004de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7999      	ldrb	r1, [r3, #6]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800267e:	461a      	mov	r2, r3
 8002680:	f002 fdb2 	bl	80051e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	7912      	ldrb	r2, [r2, #4]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e042      	b.n	800273a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da0f      	bge.n	80026dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 020f 	and.w	r2, r3, #15
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	3310      	adds	r3, #16
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	3304      	adds	r3, #4
 80026d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	705a      	strb	r2, [r3, #1]
 80026da:	e00f      	b.n	80026fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 020f 	and.w	r2, r3, #15
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	3304      	adds	r3, #4
 80026f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_PCD_EP_ClrStall+0x86>
 8002718:	2302      	movs	r3, #2
 800271a:	e00e      	b.n	800273a <HAL_PCD_EP_ClrStall+0xa4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fbca 	bl	8004ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800274e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da0c      	bge.n	8002770 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	3310      	adds	r3, #16
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e00c      	b.n	800278a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 f9e9 	bl	8004b68 <USB_EPStopXfer>
 8002796:	4603      	mov	r3, r0
 8002798:	72fb      	strb	r3, [r7, #11]

  return ret;
 800279a:	7afb      	ldrb	r3, [r7, #11]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3310      	adds	r3, #16
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d901      	bls.n	80027dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e06b      	b.n	80028b4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d902      	bls.n	80027f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	3303      	adds	r3, #3
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002800:	e02a      	b.n	8002858 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	429a      	cmp	r2, r3
 8002816:	d902      	bls.n	800281e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3303      	adds	r3, #3
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68d9      	ldr	r1, [r3, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4603      	mov	r3, r0
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f002 fa3e 	bl	8004cbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	441a      	add	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	441a      	add	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	429a      	cmp	r2, r3
 800286c:	d809      	bhi.n	8002882 <PCD_WriteEmptyTxFifo+0xde>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002876:	429a      	cmp	r2, r3
 8002878:	d203      	bcs.n	8002882 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1bf      	bne.n	8002802 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	429a      	cmp	r2, r3
 800288c:	d811      	bhi.n	80028b2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	2201      	movs	r2, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	6939      	ldr	r1, [r7, #16]
 80028aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028ae:	4013      	ands	r3, r2
 80028b0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	333c      	adds	r3, #60	@ 0x3c
 80028d4:	3304      	adds	r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	799b      	ldrb	r3, [r3, #6]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d17b      	bne.n	80029ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	4a61      	ldr	r2, [pc, #388]	@ (8002a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f240 80b9 	bls.w	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80b3 	beq.w	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291e:	461a      	mov	r2, r3
 8002920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002924:	6093      	str	r3, [r2, #8]
 8002926:	e0a7      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	2320      	movs	r3, #32
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	e098      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 8093 	bne.w	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4a4b      	ldr	r2, [pc, #300]	@ (8002a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d90f      	bls.n	800297a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	e07e      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	440b      	add	r3, r1
 800299c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d114      	bne.n	80029dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	f002 fc0e 	bl	80051e8 <USB_EP0_OutStart>
 80029cc:	e006      	b.n	80029dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f004 ff1a 	bl	800781c <HAL_PCD_DataOutStageCallback>
 80029e8:	e046      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4a26      	ldr	r2, [pc, #152]	@ (8002a88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d124      	bne.n	8002a3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a0e:	6093      	str	r3, [r2, #8]
 8002a10:	e032      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f004 fef1 	bl	800781c <HAL_PCD_DataOutStageCallback>
 8002a3a:	e01d      	b.n	8002a78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d114      	bne.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a64:	461a      	mov	r2, r3
 8002a66:	2100      	movs	r1, #0
 8002a68:	f002 fbbe 	bl	80051e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f004 fed2 	bl	800781c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	4f54300a 	.word	0x4f54300a
 8002a88:	4f54310a 	.word	0x4f54310a

08002a8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	333c      	adds	r3, #60	@ 0x3c
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d90e      	bls.n	8002ae0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ade:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f004 fe89 	bl	80077f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d90c      	bls.n	8002b08 <PCD_EP_OutSetupPacket_int+0x7c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	799b      	ldrb	r3, [r3, #6]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b00:	461a      	mov	r2, r3
 8002b02:	2101      	movs	r1, #1
 8002b04:	f002 fb70 	bl	80051e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	4f54300a 	.word	0x4f54300a

08002b18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
 8002b24:	4613      	mov	r3, r2
 8002b26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b36:	883b      	ldrh	r3, [r7, #0]
 8002b38:	0419      	lsls	r1, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b44:	e028      	b.n	8002b98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4413      	add	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e00d      	b.n	8002b76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	3340      	adds	r3, #64	@ 0x40
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3301      	adds	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3ec      	bcc.n	8002b5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	0418      	lsls	r0, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4302      	orrs	r2, r0
 8002b90:	3340      	adds	r3, #64	@ 0x40
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e267      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfe:	4b88      	ldr	r3, [pc, #544]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b85      	ldr	r3, [pc, #532]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b82      	ldr	r3, [pc, #520]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e242      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b76      	ldr	r3, [pc, #472]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b70      	ldr	r3, [pc, #448]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6f      	ldr	r2, [pc, #444]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a68      	ldr	r2, [pc, #416]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b66      	ldr	r3, [pc, #408]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe f8b4 	bl	8000e04 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe f8b0 	bl	8000e04 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e207      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f8a0 	bl	8000e04 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe f89c 	bl	8000e04 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1f3      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b51      	ldr	r3, [pc, #324]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d063      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe f855 	bl	8000e04 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe f851 	bl	8000e04 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1a8      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe f834 	bl	8000e04 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe f830 	bl	8000e04 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e187      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe f814 	bl	8000e04 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe f810 	bl	8000e04 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e167      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_OscConfig+0x240>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_OscConfig+0x248>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e06:	f7fd fffd 	bl	8000e04 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fd fff9 	bl	8000e04 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e150      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b81      	ldr	r3, [pc, #516]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b77      	ldr	r3, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b74      	ldr	r3, [pc, #464]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd ffb9 	bl	8000e04 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fd ffb5 	bl	8000e04 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e10c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_OscConfig+0x474>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x2ea>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a63      	ldr	r2, [pc, #396]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	4b5c      	ldr	r3, [pc, #368]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x324>
 8002eec:	4b58      	ldr	r3, [pc, #352]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a57      	ldr	r2, [pc, #348]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a54      	ldr	r2, [pc, #336]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fd ff7a 	bl	8000e04 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd ff76 	bl	8000e04 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0cb      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fd ff64 	bl	8000e04 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fd ff60 	bl	8000e04 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0b5      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	4a38      	ldr	r2, [pc, #224]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a1 	beq.w	80030c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d05c      	beq.n	8003044 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d141      	bne.n	8003016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fd ff34 	bl	8000e04 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd ff30 	bl	8000e04 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e087      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	491b      	ldr	r1, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fd ff09 	bl	8000e04 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fd ff05 	bl	8000e04 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e05c      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x416>
 8003014:	e054      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_RCC_OscConfig+0x478>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fef2 	bl	8000e04 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd feee 	bl	8000e04 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e038      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x4ec>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d028      	beq.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d121      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11a      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7fd fe20 	bl	8000e04 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7fd fe1c 	bl	8000e04 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd fd80 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	08008770 	.word	0x08008770
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b094      	sub	sp, #80	@ 0x50
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b79      	ldr	r3, [pc, #484]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80e1 	bhi.w	8003488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e0db      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b73      	ldr	r3, [pc, #460]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d4:	e0db      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032da:	e0d8      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b6d      	ldr	r3, [pc, #436]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d063      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b6a      	ldr	r3, [pc, #424]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003304:	633b      	str	r3, [r7, #48]	@ 0x30
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
 800330a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800330e:	4622      	mov	r2, r4
 8003310:	462b      	mov	r3, r5
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4621      	mov	r1, r4
 8003328:	1a51      	subs	r1, r2, r1
 800332a:	6139      	str	r1, [r7, #16]
 800332c:	4629      	mov	r1, r5
 800332e:	eb63 0301 	sbc.w	r3, r3, r1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003340:	4659      	mov	r1, fp
 8003342:	018b      	lsls	r3, r1, #6
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334a:	4651      	mov	r1, sl
 800334c:	018a      	lsls	r2, r1, #6
 800334e:	4651      	mov	r1, sl
 8003350:	ebb2 0801 	subs.w	r8, r2, r1
 8003354:	4659      	mov	r1, fp
 8003356:	eb63 0901 	sbc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	462b      	mov	r3, r5
 800337c:	eb49 0303 	adc.w	r3, r9, r3
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800338e:	4629      	mov	r1, r5
 8003390:	024b      	lsls	r3, r1, #9
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003398:	4621      	mov	r1, r4
 800339a:	024a      	lsls	r2, r1, #9
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ac:	f7fc ff60 	bl	8000270 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b8:	e058      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	4611      	mov	r1, r2
 80033c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	f04f 0000 	mov.w	r0, #0
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	0159      	lsls	r1, r3, #5
 80033e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e6:	0150      	lsls	r0, r2, #5
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4641      	mov	r1, r8
 80033ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800340c:	ebb2 040a 	subs.w	r4, r2, sl
 8003410:	eb63 050b 	sbc.w	r5, r3, fp
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	4614      	mov	r4, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4643      	mov	r3, r8
 800342a:	18e3      	adds	r3, r4, r3
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	464b      	mov	r3, r9
 8003430:	eb45 0303 	adc.w	r3, r5, r3
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	61fa      	str	r2, [r7, #28]
 800345c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003460:	f7fc ff06 	bl	8000270 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4613      	mov	r3, r2
 800346a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <HAL_RCC_GetSysClockFreq+0x200>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	3301      	adds	r3, #1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800347c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800348a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800348c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003490:	4618      	mov	r0, r3
 8003492:	3750      	adds	r7, #80	@ 0x50
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	@ (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c4:	f7ff fff0 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4903      	ldr	r1, [pc, #12]	@ (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08008780 	.word	0x08008780

080034e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e07b      	b.n	80035f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800350a:	d009      	beq.n	8003520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
 8003512:	e005      	b.n	8003520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fae0 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a4:	ea42 0103 	orr.w	r1, r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	f003 0104 	and.w	r1, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	f003 0210 	and.w	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b088      	sub	sp, #32
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360a:	f7fd fbfb 	bl	8000e04 <HAL_GetTick>
 800360e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	e12a      	b.n	800387a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x36>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e122      	b.n	800387a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Transmit+0x48>
 800363e:	2302      	movs	r3, #2
 8003640:	e11b      	b.n	800387a <HAL_SPI_Transmit+0x280>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003690:	d10f      	bne.n	80036b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d007      	beq.n	80036d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d8:	d152      	bne.n	8003780 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Transmit+0xee>
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d145      	bne.n	8003774 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800370c:	e032      	b.n	8003774 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d112      	bne.n	8003742 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003740:	e018      	b.n	8003774 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003742:	f7fd fb5f 	bl	8000e04 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d803      	bhi.n	800375a <HAL_SPI_Transmit+0x160>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d102      	bne.n	8003760 <HAL_SPI_Transmit+0x166>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e082      	b.n	800387a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1c7      	bne.n	800370e <HAL_SPI_Transmit+0x114>
 800377e:	e053      	b.n	8003828 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_SPI_Transmit+0x194>
 8003788:	8b7b      	ldrh	r3, [r7, #26]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d147      	bne.n	800381e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037b4:	e033      	b.n	800381e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d113      	bne.n	80037ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037ea:	e018      	b.n	800381e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ec:	f7fd fb0a 	bl	8000e04 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d803      	bhi.n	8003804 <HAL_SPI_Transmit+0x20a>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d102      	bne.n	800380a <HAL_SPI_Transmit+0x210>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e02d      	b.n	800387a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1c6      	bne.n	80037b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	6839      	ldr	r1, [r7, #0]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f9cf 	bl	8003bd0 <SPI_EndRxTxTransaction>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003878:	2300      	movs	r3, #0
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	099b      	lsrs	r3, r3, #6
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
    return;
 80038c6:	e0d7      	b.n	8003a78 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_SPI_IRQHandler+0x66>
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	09db      	lsrs	r3, r3, #7
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
    return;
 80038e8:	e0c6      	b.n	8003a78 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_SPI_IRQHandler+0x8c>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80b4 	beq.w	8003a78 <HAL_SPI_IRQHandler+0x1f4>
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80ad 	beq.w	8003a78 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	099b      	lsrs	r3, r3, #6
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d023      	beq.n	8003972 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d011      	beq.n	800395a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393a:	f043 0204 	orr.w	r2, r3, #4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	e00b      	b.n	8003972 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	693b      	ldr	r3, [r7, #16]
        return;
 8003970:	e082      	b.n	8003a78 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d014      	beq.n	80039a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f043 0208 	orr.w	r2, r3, #8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d04f      	beq.n	8003a76 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_SPI_IRQHandler+0x17e>
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d034      	beq.n	8003a6c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0203 	bic.w	r2, r2, #3
 8003a10:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d011      	beq.n	8003a3e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	4a18      	ldr	r2, [pc, #96]	@ (8003a80 <HAL_SPI_IRQHandler+0x1fc>)
 8003a20:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fb2d 	bl	8001086 <HAL_DMA_Abort_IT>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_SPI_IRQHandler+0x1fc>)
 8003a4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fb17 	bl	8001086 <HAL_DMA_Abort_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003a6a:	e003      	b.n	8003a74 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f809 	bl	8003a84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a72:	e000      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003a74:	bf00      	nop
    return;
 8003a76:	bf00      	nop
  }
}
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	08003a99 	.word	0x08003a99

08003a84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff ffe6 	bl	8003a84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad0:	f7fd f998 	bl	8000e04 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae0:	f7fd f990 	bl	8000e04 <HAL_GetTick>
 8003ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae6:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	0d1b      	lsrs	r3, r3, #20
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af6:	e054      	b.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d050      	beq.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b00:	f7fd f980 	bl	8000e04 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d902      	bls.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d13d      	bne.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2e:	d111      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b38:	d004      	beq.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b42:	d107      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5c:	d10f      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e017      	b.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d19b      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2201      	movs	r2, #1
 8003be4:	2102      	movs	r1, #2
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff ff6a 	bl	8003ac0 <SPI_WaitFlagStateUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e032      	b.n	8003c68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c02:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <SPI_EndRxTxTransaction+0xa0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	@ (8003c74 <SPI_EndRxTxTransaction+0xa4>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	0d5b      	lsrs	r3, r3, #21
 8003c0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c20:	d112      	bne.n	8003c48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2180      	movs	r1, #128	@ 0x80
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff47 	bl	8003ac0 <SPI_WaitFlagStateUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d016      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e00f      	b.n	8003c68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b80      	cmp	r3, #128	@ 0x80
 8003c60:	d0f2      	beq.n	8003c48 <SPI_EndRxTxTransaction+0x78>
 8003c62:	e000      	b.n	8003c66 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c64:	bf00      	nop
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000000 	.word	0x20000000
 8003c74:	165e9f81 	.word	0x165e9f81

08003c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c78:	b084      	sub	sp, #16
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	f107 001c 	add.w	r0, r7, #28
 8003c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d123      	bne.n	8003cda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f001 fae8 	bl	80052a4 <USB_CoreReset>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	e01b      	b.n	8003d12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f001 fadc 	bl	80052a4 <USB_CoreReset>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cf0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d04:	e005      	b.n	8003d12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d12:	7fbb      	ldrb	r3, [r7, #30]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10b      	bne.n	8003d30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f043 0206 	orr.w	r2, r3, #6
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d3c:	b004      	add	sp, #16
 8003d3e:	4770      	bx	lr

08003d40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d165      	bne.n	8003e20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4a41      	ldr	r2, [pc, #260]	@ (8003e5c <USB_SetTurnaroundTime+0x11c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d906      	bls.n	8003d6a <USB_SetTurnaroundTime+0x2a>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	@ (8003e60 <USB_SetTurnaroundTime+0x120>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d202      	bcs.n	8003d6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d64:	230f      	movs	r3, #15
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e062      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e60 <USB_SetTurnaroundTime+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d306      	bcc.n	8003d80 <USB_SetTurnaroundTime+0x40>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4a3b      	ldr	r2, [pc, #236]	@ (8003e64 <USB_SetTurnaroundTime+0x124>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d202      	bcs.n	8003d80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d7a:	230e      	movs	r3, #14
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e057      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4a38      	ldr	r2, [pc, #224]	@ (8003e64 <USB_SetTurnaroundTime+0x124>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d306      	bcc.n	8003d96 <USB_SetTurnaroundTime+0x56>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4a37      	ldr	r2, [pc, #220]	@ (8003e68 <USB_SetTurnaroundTime+0x128>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d202      	bcs.n	8003d96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d90:	230d      	movs	r3, #13
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e04c      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4a33      	ldr	r2, [pc, #204]	@ (8003e68 <USB_SetTurnaroundTime+0x128>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d306      	bcc.n	8003dac <USB_SetTurnaroundTime+0x6c>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a32      	ldr	r2, [pc, #200]	@ (8003e6c <USB_SetTurnaroundTime+0x12c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d802      	bhi.n	8003dac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003da6:	230c      	movs	r3, #12
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e041      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4a2f      	ldr	r2, [pc, #188]	@ (8003e6c <USB_SetTurnaroundTime+0x12c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d906      	bls.n	8003dc2 <USB_SetTurnaroundTime+0x82>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e70 <USB_SetTurnaroundTime+0x130>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d802      	bhi.n	8003dc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003dbc:	230b      	movs	r3, #11
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e036      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <USB_SetTurnaroundTime+0x130>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d906      	bls.n	8003dd8 <USB_SetTurnaroundTime+0x98>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <USB_SetTurnaroundTime+0x134>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dd2:	230a      	movs	r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e02b      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <USB_SetTurnaroundTime+0x134>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d906      	bls.n	8003dee <USB_SetTurnaroundTime+0xae>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4a25      	ldr	r2, [pc, #148]	@ (8003e78 <USB_SetTurnaroundTime+0x138>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d202      	bcs.n	8003dee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003de8:	2309      	movs	r3, #9
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e020      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <USB_SetTurnaroundTime+0x138>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d306      	bcc.n	8003e04 <USB_SetTurnaroundTime+0xc4>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4a20      	ldr	r2, [pc, #128]	@ (8003e7c <USB_SetTurnaroundTime+0x13c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d802      	bhi.n	8003e04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dfe:	2308      	movs	r3, #8
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e015      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <USB_SetTurnaroundTime+0x13c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d906      	bls.n	8003e1a <USB_SetTurnaroundTime+0xda>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <USB_SetTurnaroundTime+0x140>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d202      	bcs.n	8003e1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e14:	2307      	movs	r3, #7
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e00a      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e007      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e26:	2309      	movs	r3, #9
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e001      	b.n	8003e30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e2c:	2309      	movs	r3, #9
 8003e2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	029b      	lsls	r3, r3, #10
 8003e44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	00d8acbf 	.word	0x00d8acbf
 8003e60:	00e4e1c0 	.word	0x00e4e1c0
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	01067380 	.word	0x01067380
 8003e6c:	011a499f 	.word	0x011a499f
 8003e70:	01312cff 	.word	0x01312cff
 8003e74:	014ca43f 	.word	0x014ca43f
 8003e78:	016e3600 	.word	0x016e3600
 8003e7c:	01a6ab1f 	.word	0x01a6ab1f
 8003e80:	01e84800 	.word	0x01e84800

08003e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d115      	bne.n	8003f16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ef6:	200a      	movs	r0, #10
 8003ef8:	f7fc ff90 	bl	8000e1c <HAL_Delay>
      ms += 10U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	330a      	adds	r3, #10
 8003f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 f93f 	bl	8005186 <USB_GetMode>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d01e      	beq.n	8003f4c <USB_SetCurrentMode+0x84>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f12:	d9f0      	bls.n	8003ef6 <USB_SetCurrentMode+0x2e>
 8003f14:	e01a      	b.n	8003f4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d115      	bne.n	8003f48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f28:	200a      	movs	r0, #10
 8003f2a:	f7fc ff77 	bl	8000e1c <HAL_Delay>
      ms += 10U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	330a      	adds	r3, #10
 8003f32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 f926 	bl	8005186 <USB_GetMode>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <USB_SetCurrentMode+0x84>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2bc7      	cmp	r3, #199	@ 0xc7
 8003f44:	d9f0      	bls.n	8003f28 <USB_SetCurrentMode+0x60>
 8003f46:	e001      	b.n	8003f4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e005      	b.n	8003f58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003f50:	d101      	bne.n	8003f56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f60:	b084      	sub	sp, #16
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	e009      	b.n	8003f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3340      	adds	r3, #64	@ 0x40
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3301      	adds	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b0e      	cmp	r3, #14
 8003f98:	d9f2      	bls.n	8003f80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11c      	bne.n	8003fdc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb0:	f043 0302 	orr.w	r3, r3, #2
 8003fb4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fda:	e00b      	b.n	8003ff4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004000:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004004:	2b01      	cmp	r3, #1
 8004006:	d10d      	bne.n	8004024 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004010:	2100      	movs	r1, #0
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f968 	bl	80042e8 <USB_SetDevSpeed>
 8004018:	e008      	b.n	800402c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800401a:	2101      	movs	r1, #1
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f963 	bl	80042e8 <USB_SetDevSpeed>
 8004022:	e003      	b.n	800402c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004024:	2103      	movs	r1, #3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f95e 	bl	80042e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800402c:	2110      	movs	r1, #16
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8fa 	bl	8004228 <USB_FlushTxFifo>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f924 	bl	800428c <USB_FlushRxFifo>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004054:	461a      	mov	r2, r3
 8004056:	2300      	movs	r3, #0
 8004058:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004060:	461a      	mov	r2, r3
 8004062:	2300      	movs	r3, #0
 8004064:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406c:	461a      	mov	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e043      	b.n	8004100 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800408a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800408e:	d118      	bne.n	80040c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a2:	461a      	mov	r2, r3
 80040a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e013      	b.n	80040d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b8:	461a      	mov	r2, r3
 80040ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	e008      	b.n	80040d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e0:	461a      	mov	r2, r3
 80040e2:	2300      	movs	r3, #0
 80040e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f2:	461a      	mov	r2, r3
 80040f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3301      	adds	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004104:	461a      	mov	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4293      	cmp	r3, r2
 800410a:	d3b5      	bcc.n	8004078 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e043      	b.n	800419a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004128:	d118      	bne.n	800415c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e013      	b.n	800416e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004152:	461a      	mov	r2, r3
 8004154:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e008      	b.n	800416e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004168:	461a      	mov	r2, r3
 800416a:	2300      	movs	r3, #0
 800416c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417a:	461a      	mov	r2, r3
 800417c:	2300      	movs	r3, #0
 800417e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004192:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3301      	adds	r3, #1
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800419e:	461a      	mov	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d3b5      	bcc.n	8004112 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80041c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f043 0210 	orr.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <USB_DevInit+0x2c4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f043 0208 	orr.w	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004220:	b004      	add	sp, #16
 8004222:	4770      	bx	lr
 8004224:	803c3800 	.word	0x803c3800

08004228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004242:	d901      	bls.n	8004248 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e01b      	b.n	8004280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	daf2      	bge.n	8004236 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	019b      	lsls	r3, r3, #6
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800426c:	d901      	bls.n	8004272 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e006      	b.n	8004280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d0f0      	beq.n	8004260 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042a4:	d901      	bls.n	80042aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e018      	b.n	80042dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	daf2      	bge.n	8004298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2210      	movs	r2, #16
 80042ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042c8:	d901      	bls.n	80042ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e006      	b.n	80042dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d0f0      	beq.n	80042bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800431a:	b480      	push	{r7}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0306 	and.w	r3, r3, #6
 8004332:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]
 800433e:	e00a      	b.n	8004356 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d002      	beq.n	800434c <USB_GetDevSpeed+0x32>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d102      	bne.n	8004352 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800434c:	2302      	movs	r3, #2
 800434e:	75fb      	strb	r3, [r7, #23]
 8004350:	e001      	b.n	8004356 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004352:	230f      	movs	r3, #15
 8004354:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d13a      	bne.n	80043f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	2101      	movs	r1, #1
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800439e:	4313      	orrs	r3, r2
 80043a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d155      	bne.n	8004464 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	791b      	ldrb	r3, [r3, #4]
 80043d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	059b      	lsls	r3, r3, #22
 80043da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043dc:	4313      	orrs	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e036      	b.n	8004464 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004414:	4313      	orrs	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11a      	bne.n	8004464 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	791b      	ldrb	r3, [r3, #4]
 8004448:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800444a:	430b      	orrs	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004462:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d161      	bne.n	8004554 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044a6:	d11f      	bne.n	80044e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004508:	4013      	ands	r3, r2
 800450a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800452c:	4013      	ands	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	0159      	lsls	r1, r3, #5
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	440b      	add	r3, r1
 8004546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454a:	4619      	mov	r1, r3
 800454c:	4b35      	ldr	r3, [pc, #212]	@ (8004624 <USB_DeactivateEndpoint+0x1b0>)
 800454e:	4013      	ands	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
 8004552:	e060      	b.n	8004616 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800456a:	d11f      	bne.n	80045ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	440a      	add	r2, r1
 8004582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800458a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	2101      	movs	r1, #1
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	43db      	mvns	r3, r3
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045cc:	4013      	ands	r3, r2
 80045ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	2101      	movs	r1, #1
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	43db      	mvns	r3, r3
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045f0:	4013      	ands	r3, r2
 80045f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0159      	lsls	r1, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	440b      	add	r3, r1
 800460a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460e:	4619      	mov	r1, r3
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <USB_DeactivateEndpoint+0x1b4>)
 8004612:	4013      	ands	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	ec337800 	.word	0xec337800
 8004628:	eff37800 	.word	0xeff37800

0800462c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 817f 	bne.w	800494c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d132      	bne.n	80046bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004670:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004674:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004694:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b4:	0cdb      	lsrs	r3, r3, #19
 80046b6:	04db      	lsls	r3, r3, #19
 80046b8:	6113      	str	r3, [r2, #16]
 80046ba:	e097      	b.n	80047ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d6:	0cdb      	lsrs	r3, r3, #19
 80046d8:	04db      	lsls	r3, r3, #19
 80046da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11a      	bne.n	800473c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	d903      	bls.n	800471a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004738:	6113      	str	r3, [r2, #16]
 800473a:	e044      	b.n	80047c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4413      	add	r3, r2
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	8afb      	ldrh	r3, [r7, #22]
 8004762:	04d9      	lsls	r1, r3, #19
 8004764:	4ba4      	ldr	r3, [pc, #656]	@ (80049f8 <USB_EPStartXfer+0x3cc>)
 8004766:	400b      	ands	r3, r1
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	0148      	lsls	r0, r1, #5
 800476c:	69f9      	ldr	r1, [r7, #28]
 800476e:	4401      	add	r1, r0
 8004770:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004774:	4313      	orrs	r3, r2
 8004776:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d122      	bne.n	80047c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800479a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800479e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	8afb      	ldrh	r3, [r7, #22]
 80047b0:	075b      	lsls	r3, r3, #29
 80047b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80047b6:	69b9      	ldr	r1, [r7, #24]
 80047b8:	0148      	lsls	r0, r1, #5
 80047ba:	69f9      	ldr	r1, [r7, #28]
 80047bc:	4401      	add	r1, r0
 80047be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047dc:	69b9      	ldr	r1, [r7, #24]
 80047de:	0148      	lsls	r0, r1, #5
 80047e0:	69f9      	ldr	r1, [r7, #28]
 80047e2:	4401      	add	r1, r0
 80047e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047e8:	4313      	orrs	r3, r2
 80047ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d14b      	bne.n	800488a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	791b      	ldrb	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d128      	bne.n	8004868 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d110      	bne.n	8004848 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e00f      	b.n	8004868 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004866:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004882:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	e166      	b.n	8004b58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80048a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	791b      	ldrb	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d015      	beq.n	80048de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 814e 	beq.w	8004b58 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	69f9      	ldr	r1, [r7, #28]
 80048d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048d8:	4313      	orrs	r3, r2
 80048da:	634b      	str	r3, [r1, #52]	@ 0x34
 80048dc:	e13c      	b.n	8004b58 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d110      	bne.n	8004910 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004908:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e00f      	b.n	8004930 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	68d9      	ldr	r1, [r3, #12]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781a      	ldrb	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	b298      	uxth	r0, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4603      	mov	r3, r0
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f9b9 	bl	8004cbc <USB_WritePacket>
 800494a:	e105      	b.n	8004b58 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004966:	0cdb      	lsrs	r3, r3, #19
 8004968:	04db      	lsls	r3, r3, #19
 800496a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004986:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800498a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800498e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d132      	bne.n	80049fc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	0148      	lsls	r0, r1, #5
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	4401      	add	r1, r0
 80049cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049d0:	4313      	orrs	r3, r2
 80049d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049f2:	6113      	str	r3, [r2, #16]
 80049f4:	e062      	b.n	8004abc <USB_EPStartXfer+0x490>
 80049f6:	bf00      	nop
 80049f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d123      	bne.n	8004a4c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	0148      	lsls	r0, r1, #5
 8004a1e:	69f9      	ldr	r1, [r7, #28]
 8004a20:	4401      	add	r1, r0
 8004a22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a48:	6113      	str	r3, [r2, #16]
 8004a4a:	e037      	b.n	8004abc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	8afa      	ldrh	r2, [r7, #22]
 8004a68:	fb03 f202 	mul.w	r2, r3, r2
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	8afb      	ldrh	r3, [r7, #22]
 8004a80:	04d9      	lsls	r1, r3, #19
 8004a82:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <USB_EPStartXfer+0x538>)
 8004a84:	400b      	ands	r3, r1
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	0148      	lsls	r0, r1, #5
 8004a8a:	69f9      	ldr	r1, [r7, #28]
 8004a8c:	4401      	add	r1, r0
 8004a8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a92:	4313      	orrs	r3, r2
 8004a94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aac:	69b9      	ldr	r1, [r7, #24]
 8004aae:	0148      	lsls	r0, r1, #5
 8004ab0:	69f9      	ldr	r1, [r7, #28]
 8004ab2:	4401      	add	r1, r0
 8004ab4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10d      	bne.n	8004ade <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	68d9      	ldr	r1, [r3, #12]
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ada:	460a      	mov	r2, r1
 8004adc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	791b      	ldrb	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d128      	bne.n	8004b38 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d110      	bne.n	8004b18 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00f      	b.n	8004b38 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	1ff80000 	.word	0x1ff80000

08004b68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d14a      	bne.n	8004c1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b9e:	f040 8086 	bne.w	8004cae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d902      	bls.n	8004c00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8004bfe:	e056      	b.n	8004cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c18:	d0e7      	beq.n	8004bea <USB_EPStopXfer+0x82>
 8004c1a:	e048      	b.n	8004cae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c34:	d13b      	bne.n	8004cae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d902      	bls.n	8004c94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
          break;
 8004c92:	e00c      	b.n	8004cae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cac:	d0e7      	beq.n	8004c7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b089      	sub	sp, #36	@ 0x24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	460b      	mov	r3, r1
 8004ccc:	71fb      	strb	r3, [r7, #7]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d123      	bne.n	8004d2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ce2:	88bb      	ldrh	r3, [r7, #4]
 8004ce4:	3303      	adds	r3, #3
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e018      	b.n	8004d22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	031a      	lsls	r2, r3, #12
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	3301      	adds	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3e2      	bcc.n	8004cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3724      	adds	r7, #36	@ 0x24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b08b      	sub	sp, #44	@ 0x2c
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	e014      	b.n	8004d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	3301      	adds	r3, #1
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	3301      	adds	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	3301      	adds	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	3301      	adds	r3, #1
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d3e6      	bcc.n	8004d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d96:	8bfb      	ldrh	r3, [r7, #30]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01e      	beq.n	8004dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da6:	461a      	mov	r2, r3
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	3301      	adds	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004dce:	8bfb      	ldrh	r3, [r7, #30]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dd4:	8bfb      	ldrh	r3, [r7, #30]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ea      	bne.n	8004db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	372c      	adds	r7, #44	@ 0x2c
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d12c      	bne.n	8004e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	db12      	blt.n	8004e3c <USB_EPSetStall+0x54>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e02b      	b.n	8004eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db12      	blt.n	8004e96 <USB_EPSetStall+0xae>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00f      	beq.n	8004e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d128      	bne.n	8004f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	791b      	ldrb	r3, [r3, #4]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d003      	beq.n	8004f10 <USB_EPClearStall+0x4c>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	791b      	ldrb	r3, [r3, #4]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d138      	bne.n	8004f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	e027      	b.n	8004f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d003      	beq.n	8004f62 <USB_EPClearStall+0x9e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	791b      	ldrb	r3, [r3, #4]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d10f      	bne.n	8004f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004fc4:	68f9      	ldr	r1, [r7, #12]
 8004fc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800500a:	f023 0302 	bic.w	r3, r3, #2
 800500e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	0c1b      	lsrs	r3, r3, #16
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	4013      	ands	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	b29b      	uxth	r3, r3
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4013      	ands	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800511c:	68bb      	ldr	r3, [r7, #8]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800512a:	b480      	push	{r7}
 800512c:	b087      	sub	sp, #28
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	01db      	lsls	r3, r3, #7
 800515c:	b2db      	uxtb	r3, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4013      	ands	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005178:	68bb      	ldr	r3, [r7, #8]
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0301 	and.w	r3, r3, #1
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051c0:	f023 0307 	bic.w	r3, r3, #7
 80051c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	460b      	mov	r3, r1
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	333c      	adds	r3, #60	@ 0x3c
 80051fe:	3304      	adds	r3, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4a26      	ldr	r2, [pc, #152]	@ (80052a0 <USB_EP0_OutStart+0xb8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d90a      	bls.n	8005222 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800521c:	d101      	bne.n	8005222 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e037      	b.n	8005292 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800523c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005250:	f043 0318 	orr.w	r3, r3, #24
 8005254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005264:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005268:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800526a:	7afb      	ldrb	r3, [r7, #11]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10f      	bne.n	8005290 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800528a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800528e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	4f54300a 	.word	0x4f54300a

080052a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052bc:	d901      	bls.n	80052c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e01b      	b.n	80052fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	daf2      	bge.n	80052b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e6:	d901      	bls.n	80052ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e006      	b.n	80052fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d0f0      	beq.n	80052da <USB_CoreReset+0x36>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005314:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005318:	f002 fcea 	bl	8007cf0 <USBD_static_malloc>
 800531c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	32b0      	adds	r2, #176	@ 0xb0
 800532e:	2100      	movs	r1, #0
 8005330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005334:	2302      	movs	r3, #2
 8005336:	e0d4      	b.n	80054e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005338:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800533c:	2100      	movs	r1, #0
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f002 fd70 	bl	8007e24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	32b0      	adds	r2, #176	@ 0xb0
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	32b0      	adds	r2, #176	@ 0xb0
 800535e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7c1b      	ldrb	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d138      	bne.n	80053e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005370:	4b5e      	ldr	r3, [pc, #376]	@ (80054ec <USBD_CDC_Init+0x1e4>)
 8005372:	7819      	ldrb	r1, [r3, #0]
 8005374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005378:	2202      	movs	r2, #2
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f002 fb95 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005380:	4b5a      	ldr	r3, [pc, #360]	@ (80054ec <USBD_CDC_Init+0x1e4>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	3324      	adds	r3, #36	@ 0x24
 8005396:	2201      	movs	r2, #1
 8005398:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800539a:	4b55      	ldr	r3, [pc, #340]	@ (80054f0 <USBD_CDC_Init+0x1e8>)
 800539c:	7819      	ldrb	r1, [r3, #0]
 800539e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053a2:	2202      	movs	r2, #2
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f002 fb80 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053aa:	4b51      	ldr	r3, [pc, #324]	@ (80054f0 <USBD_CDC_Init+0x1e8>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f003 020f 	and.w	r2, r3, #15
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053c2:	2201      	movs	r2, #1
 80053c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80053c6:	4b4b      	ldr	r3, [pc, #300]	@ (80054f4 <USBD_CDC_Init+0x1ec>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f003 020f 	and.w	r2, r3, #15
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	3326      	adds	r3, #38	@ 0x26
 80053dc:	2210      	movs	r2, #16
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e035      	b.n	800544e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053e2:	4b42      	ldr	r3, [pc, #264]	@ (80054ec <USBD_CDC_Init+0x1e4>)
 80053e4:	7819      	ldrb	r1, [r3, #0]
 80053e6:	2340      	movs	r3, #64	@ 0x40
 80053e8:	2202      	movs	r2, #2
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f002 fb5d 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053f0:	4b3e      	ldr	r3, [pc, #248]	@ (80054ec <USBD_CDC_Init+0x1e4>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	3324      	adds	r3, #36	@ 0x24
 8005406:	2201      	movs	r2, #1
 8005408:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800540a:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <USBD_CDC_Init+0x1e8>)
 800540c:	7819      	ldrb	r1, [r3, #0]
 800540e:	2340      	movs	r3, #64	@ 0x40
 8005410:	2202      	movs	r2, #2
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f002 fb49 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005418:	4b35      	ldr	r3, [pc, #212]	@ (80054f0 <USBD_CDC_Init+0x1e8>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005430:	2201      	movs	r2, #1
 8005432:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005434:	4b2f      	ldr	r3, [pc, #188]	@ (80054f4 <USBD_CDC_Init+0x1ec>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3326      	adds	r3, #38	@ 0x26
 800544a:	2210      	movs	r2, #16
 800544c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800544e:	4b29      	ldr	r3, [pc, #164]	@ (80054f4 <USBD_CDC_Init+0x1ec>)
 8005450:	7819      	ldrb	r1, [r3, #0]
 8005452:	2308      	movs	r3, #8
 8005454:	2203      	movs	r2, #3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f002 fb27 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800545c:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <USBD_CDC_Init+0x1ec>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3324      	adds	r3, #36	@ 0x24
 8005472:	2201      	movs	r2, #1
 8005474:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	33b0      	adds	r3, #176	@ 0xb0
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80054ac:	2302      	movs	r3, #2
 80054ae:	e018      	b.n	80054e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7c1b      	ldrb	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054b8:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <USBD_CDC_Init+0x1e8>)
 80054ba:	7819      	ldrb	r1, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f002 fbde 	bl	8007c88 <USBD_LL_PrepareReceive>
 80054cc:	e008      	b.n	80054e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054ce:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <USBD_CDC_Init+0x1e8>)
 80054d0:	7819      	ldrb	r1, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054d8:	2340      	movs	r3, #64	@ 0x40
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f002 fbd4 	bl	8007c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000093 	.word	0x20000093
 80054f0:	20000094 	.word	0x20000094
 80054f4:	20000095 	.word	0x20000095

080054f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005504:	4b3a      	ldr	r3, [pc, #232]	@ (80055f0 <USBD_CDC_DeInit+0xf8>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f002 faf3 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005510:	4b37      	ldr	r3, [pc, #220]	@ (80055f0 <USBD_CDC_DeInit+0xf8>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	3324      	adds	r3, #36	@ 0x24
 8005526:	2200      	movs	r2, #0
 8005528:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800552a:	4b32      	ldr	r3, [pc, #200]	@ (80055f4 <USBD_CDC_DeInit+0xfc>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fae0 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005536:	4b2f      	ldr	r3, [pc, #188]	@ (80055f4 <USBD_CDC_DeInit+0xfc>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800554e:	2200      	movs	r2, #0
 8005550:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005552:	4b29      	ldr	r3, [pc, #164]	@ (80055f8 <USBD_CDC_DeInit+0x100>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f002 facc 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800555e:	4b26      	ldr	r3, [pc, #152]	@ (80055f8 <USBD_CDC_DeInit+0x100>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f003 020f 	and.w	r2, r3, #15
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3324      	adds	r3, #36	@ 0x24
 8005574:	2200      	movs	r2, #0
 8005576:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005578:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <USBD_CDC_DeInit+0x100>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3326      	adds	r3, #38	@ 0x26
 800558e:	2200      	movs	r2, #0
 8005590:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	32b0      	adds	r2, #176	@ 0xb0
 800559c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	33b0      	adds	r3, #176	@ 0xb0
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	32b0      	adds	r2, #176	@ 0xb0
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 fba0 	bl	8007d0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	32b0      	adds	r2, #176	@ 0xb0
 80055d6:	2100      	movs	r1, #0
 80055d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000093 	.word	0x20000093
 80055f4:	20000094 	.word	0x20000094
 80055f8:	20000095 	.word	0x20000095

080055fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	32b0      	adds	r2, #176	@ 0xb0
 8005610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005614:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	e0bf      	b.n	80057ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005634:	2b00      	cmp	r3, #0
 8005636:	d050      	beq.n	80056da <USBD_CDC_Setup+0xde>
 8005638:	2b20      	cmp	r3, #32
 800563a:	f040 80af 	bne.w	800579c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	88db      	ldrh	r3, [r3, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03a      	beq.n	80056bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b25b      	sxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	da1b      	bge.n	8005688 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	33b0      	adds	r3, #176	@ 0xb0
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005666:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	88d2      	ldrh	r2, [r2, #6]
 800566c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	88db      	ldrh	r3, [r3, #6]
 8005672:	2b07      	cmp	r3, #7
 8005674:	bf28      	it	cs
 8005676:	2307      	movcs	r3, #7
 8005678:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	89fa      	ldrh	r2, [r7, #14]
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 fd93 	bl	80071ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005686:	e090      	b.n	80057aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785a      	ldrb	r2, [r3, #1]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	2b3f      	cmp	r3, #63	@ 0x3f
 8005698:	d803      	bhi.n	80056a2 <USBD_CDC_Setup+0xa6>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	88db      	ldrh	r3, [r3, #6]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	e000      	b.n	80056a4 <USBD_CDC_Setup+0xa8>
 80056a2:	2240      	movs	r2, #64	@ 0x40
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80056aa:	6939      	ldr	r1, [r7, #16]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80056b2:	461a      	mov	r2, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fda5 	bl	8007204 <USBD_CtlPrepareRx>
      break;
 80056ba:	e076      	b.n	80057aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	33b0      	adds	r3, #176	@ 0xb0
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	7850      	ldrb	r0, [r2, #1]
 80056d2:	2200      	movs	r2, #0
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	4798      	blx	r3
      break;
 80056d8:	e067      	b.n	80057aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b0b      	cmp	r3, #11
 80056e0:	d851      	bhi.n	8005786 <USBD_CDC_Setup+0x18a>
 80056e2:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <USBD_CDC_Setup+0xec>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	08005719 	.word	0x08005719
 80056ec:	08005795 	.word	0x08005795
 80056f0:	08005787 	.word	0x08005787
 80056f4:	08005787 	.word	0x08005787
 80056f8:	08005787 	.word	0x08005787
 80056fc:	08005787 	.word	0x08005787
 8005700:	08005787 	.word	0x08005787
 8005704:	08005787 	.word	0x08005787
 8005708:	08005787 	.word	0x08005787
 800570c:	08005787 	.word	0x08005787
 8005710:	08005743 	.word	0x08005743
 8005714:	0800576d 	.word	0x0800576d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b03      	cmp	r3, #3
 8005722:	d107      	bne.n	8005734 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005724:	f107 030a 	add.w	r3, r7, #10
 8005728:	2202      	movs	r2, #2
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fd3d 	bl	80071ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005732:	e032      	b.n	800579a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fcbb 	bl	80070b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800573c:	2303      	movs	r3, #3
 800573e:	75fb      	strb	r3, [r7, #23]
          break;
 8005740:	e02b      	b.n	800579a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d107      	bne.n	800575e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800574e:	f107 030d 	add.w	r3, r7, #13
 8005752:	2201      	movs	r2, #1
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fd28 	bl	80071ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800575c:	e01d      	b.n	800579a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fca6 	bl	80070b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005766:	2303      	movs	r3, #3
 8005768:	75fb      	strb	r3, [r7, #23]
          break;
 800576a:	e016      	b.n	800579a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b03      	cmp	r3, #3
 8005776:	d00f      	beq.n	8005798 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fc99 	bl	80070b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005780:	2303      	movs	r3, #3
 8005782:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005784:	e008      	b.n	8005798 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fc92 	bl	80070b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800578e:	2303      	movs	r3, #3
 8005790:	75fb      	strb	r3, [r7, #23]
          break;
 8005792:	e002      	b.n	800579a <USBD_CDC_Setup+0x19e>
          break;
 8005794:	bf00      	nop
 8005796:	e008      	b.n	80057aa <USBD_CDC_Setup+0x1ae>
          break;
 8005798:	bf00      	nop
      }
      break;
 800579a:	e006      	b.n	80057aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f001 fc87 	bl	80070b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80057a4:	2303      	movs	r3, #3
 80057a6:	75fb      	strb	r3, [r7, #23]
      break;
 80057a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80057c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	32b0      	adds	r2, #176	@ 0xb0
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80057da:	2303      	movs	r3, #3
 80057dc:	e065      	b.n	80058aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	32b0      	adds	r2, #176	@ 0xb0
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	3318      	adds	r3, #24
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02f      	beq.n	8005868 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	f003 020f 	and.w	r2, r3, #15
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	3318      	adds	r3, #24
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 010f 	and.w	r1, r3, #15
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	460b      	mov	r3, r1
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	440b      	add	r3, r1
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4403      	add	r3, r0
 8005830:	331c      	adds	r3, #28
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	fbb2 f1f3 	udiv	r1, r2, r3
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800583e:	2b00      	cmp	r3, #0
 8005840:	d112      	bne.n	8005868 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3318      	adds	r3, #24
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800585a:	78f9      	ldrb	r1, [r7, #3]
 800585c:	2300      	movs	r3, #0
 800585e:	2200      	movs	r2, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f002 f9f0 	bl	8007c46 <USBD_LL_Transmit>
 8005866:	e01f      	b.n	80058a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	33b0      	adds	r3, #176	@ 0xb0
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d010      	beq.n	80058a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	33b0      	adds	r3, #176	@ 0xb0
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	32b0      	adds	r2, #176	@ 0xb0
 80058c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	32b0      	adds	r2, #176	@ 0xb0
 80058d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01a      	b.n	800591a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f002 f9ee 	bl	8007cca <USBD_LL_GetRxDataSize>
 80058ee:	4602      	mov	r2, r0
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	33b0      	adds	r3, #176	@ 0xb0
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005914:	4611      	mov	r1, r2
 8005916:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	32b0      	adds	r2, #176	@ 0xb0
 8005934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005938:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005940:	2303      	movs	r3, #3
 8005942:	e024      	b.n	800598e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	33b0      	adds	r3, #176	@ 0xb0
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d019      	beq.n	800598c <USBD_CDC_EP0_RxReady+0x6a>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800595e:	2bff      	cmp	r3, #255	@ 0xff
 8005960:	d014      	beq.n	800598c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	33b0      	adds	r3, #176	@ 0xb0
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800597a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005982:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	22ff      	movs	r2, #255	@ 0xff
 8005988:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059a0:	2182      	movs	r1, #130	@ 0x82
 80059a2:	4818      	ldr	r0, [pc, #96]	@ (8005a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059a4:	f000 fd4f 	bl	8006446 <USBD_GetEpDesc>
 80059a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059aa:	2101      	movs	r1, #1
 80059ac:	4815      	ldr	r0, [pc, #84]	@ (8005a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059ae:	f000 fd4a 	bl	8006446 <USBD_GetEpDesc>
 80059b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059b4:	2181      	movs	r1, #129	@ 0x81
 80059b6:	4813      	ldr	r0, [pc, #76]	@ (8005a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059b8:	f000 fd45 	bl	8006446 <USBD_GetEpDesc>
 80059bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2210      	movs	r2, #16
 80059c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059d8:	711a      	strb	r2, [r3, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059ec:	711a      	strb	r2, [r3, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2243      	movs	r2, #67	@ 0x43
 80059f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059f8:	4b02      	ldr	r3, [pc, #8]	@ (8005a04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000050 	.word	0x20000050

08005a08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a10:	2182      	movs	r1, #130	@ 0x82
 8005a12:	4818      	ldr	r0, [pc, #96]	@ (8005a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a14:	f000 fd17 	bl	8006446 <USBD_GetEpDesc>
 8005a18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	4815      	ldr	r0, [pc, #84]	@ (8005a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a1e:	f000 fd12 	bl	8006446 <USBD_GetEpDesc>
 8005a22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a24:	2181      	movs	r1, #129	@ 0x81
 8005a26:	4813      	ldr	r0, [pc, #76]	@ (8005a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a28:	f000 fd0d 	bl	8006446 <USBD_GetEpDesc>
 8005a2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2210      	movs	r2, #16
 8005a38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2200      	movs	r2, #0
 8005a44:	711a      	strb	r2, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f042 0202 	orr.w	r2, r2, #2
 8005a4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	711a      	strb	r2, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f042 0202 	orr.w	r2, r2, #2
 8005a60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2243      	movs	r2, #67	@ 0x43
 8005a66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a68:	4b02      	ldr	r3, [pc, #8]	@ (8005a74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000050 	.word	0x20000050

08005a78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a80:	2182      	movs	r1, #130	@ 0x82
 8005a82:	4818      	ldr	r0, [pc, #96]	@ (8005ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a84:	f000 fcdf 	bl	8006446 <USBD_GetEpDesc>
 8005a88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4815      	ldr	r0, [pc, #84]	@ (8005ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a8e:	f000 fcda 	bl	8006446 <USBD_GetEpDesc>
 8005a92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a94:	2181      	movs	r1, #129	@ 0x81
 8005a96:	4813      	ldr	r0, [pc, #76]	@ (8005ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a98:	f000 fcd5 	bl	8006446 <USBD_GetEpDesc>
 8005a9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d006      	beq.n	8005abe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ab8:	711a      	strb	r2, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d006      	beq.n	8005ad2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005acc:	711a      	strb	r2, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2243      	movs	r2, #67	@ 0x43
 8005ad6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ad8:	4b02      	ldr	r3, [pc, #8]	@ (8005ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000050 	.word	0x20000050

08005ae8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	220a      	movs	r2, #10
 8005af4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005af6:	4b03      	ldr	r3, [pc, #12]	@ (8005b04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	2000000c 	.word	0x2000000c

08005b08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e009      	b.n	8005b30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	33b0      	adds	r3, #176	@ 0xb0
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	32b0      	adds	r2, #176	@ 0xb0
 8005b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b56:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e008      	b.n	8005b74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32b0      	adds	r2, #176	@ 0xb0
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e004      	b.n	8005bae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	32b0      	adds	r2, #176	@ 0xb0
 8005bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e025      	b.n	8005c2e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11f      	bne.n	8005c2c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005bf4:	4b10      	ldr	r3, [pc, #64]	@ (8005c38 <USBD_CDC_TransmitPacket+0x7c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 020f 	and.w	r2, r3, #15
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4403      	add	r3, r0
 8005c0e:	3318      	adds	r3, #24
 8005c10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005c12:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <USBD_CDC_TransmitPacket+0x7c>)
 8005c14:	7819      	ldrb	r1, [r3, #0]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f002 f80f 	bl	8007c46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000093 	.word	0x20000093

08005c3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	32b0      	adds	r2, #176	@ 0xb0
 8005c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	32b0      	adds	r2, #176	@ 0xb0
 8005c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e018      	b.n	8005c9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7c1b      	ldrb	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <USBD_CDC_ReceivePacket+0x68>)
 8005c74:	7819      	ldrb	r1, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f002 f801 	bl	8007c88 <USBD_LL_PrepareReceive>
 8005c86:	e008      	b.n	8005c9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c88:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <USBD_CDC_ReceivePacket+0x68>)
 8005c8a:	7819      	ldrb	r1, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c92:	2340      	movs	r3, #64	@ 0x40
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 fff7 	bl	8007c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000094 	.word	0x20000094

08005ca8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e01f      	b.n	8005d00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	79fa      	ldrb	r2, [r7, #7]
 8005cf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f001 fe71 	bl	80079dc <USBD_LL_Init>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e025      	b.n	8005d6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	32ae      	adds	r2, #174	@ 0xae
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00f      	beq.n	8005d5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	32ae      	adds	r2, #174	@ 0xae
 8005d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	f107 020e 	add.w	r2, r7, #14
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fe79 	bl	8007a74 <USBD_LL_Start>
 8005d82:	4603      	mov	r3, r0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d009      	beq.n	8005dd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	4611      	mov	r1, r2
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 f90c 	bl	800703e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d01a      	beq.n	8005e80 <USBD_LL_SetupStage+0x72>
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d822      	bhi.n	8005e94 <USBD_LL_SetupStage+0x86>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <USBD_LL_SetupStage+0x4a>
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d00a      	beq.n	8005e6c <USBD_LL_SetupStage+0x5e>
 8005e56:	e01d      	b.n	8005e94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb63 	bl	800652c <USBD_StdDevReq>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6a:	e020      	b.n	8005eae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fbcb 	bl	8006610 <USBD_StdItfReq>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e7e:	e016      	b.n	8005eae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fc2d 	bl	80066e8 <USBD_StdEPReq>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73fb      	strb	r3, [r7, #15]
      break;
 8005e92:	e00c      	b.n	8005eae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 fe46 	bl	8007b34 <USBD_LL_StallEP>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005eac:	bf00      	nop
  }

  return ret;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d16e      	bne.n	8005fae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ed6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	f040 8098 	bne.w	8006014 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d913      	bls.n	8005f18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	4293      	cmp	r3, r2
 8005f08:	bf28      	it	cs
 8005f0a:	4613      	movcs	r3, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f001 f994 	bl	800723e <USBD_CtlContinueRx>
 8005f16:	e07d      	b.n	8006014 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d014      	beq.n	8005f50 <USBD_LL_DataOutStage+0x98>
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d81d      	bhi.n	8005f66 <USBD_LL_DataOutStage+0xae>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <USBD_LL_DataOutStage+0x7c>
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d003      	beq.n	8005f3a <USBD_LL_DataOutStage+0x82>
 8005f32:	e018      	b.n	8005f66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	75bb      	strb	r3, [r7, #22]
            break;
 8005f38:	e018      	b.n	8005f6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	4619      	mov	r1, r3
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fa64 	bl	8006412 <USBD_CoreFindIF>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f4e:	e00d      	b.n	8005f6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fa66 	bl	800642c <USBD_CoreFindEP>
 8005f60:	4603      	mov	r3, r0
 8005f62:	75bb      	strb	r3, [r7, #22]
            break;
 8005f64:	e002      	b.n	8005f6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75bb      	strb	r3, [r7, #22]
            break;
 8005f6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f6c:	7dbb      	ldrb	r3, [r7, #22]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d119      	bne.n	8005fa6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d113      	bne.n	8005fa6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f7e:	7dba      	ldrb	r2, [r7, #22]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	32ae      	adds	r2, #174	@ 0xae
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f8e:	7dba      	ldrb	r2, [r7, #22]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f96:	7dba      	ldrb	r2, [r7, #22]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	32ae      	adds	r2, #174	@ 0xae
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f001 f95a 	bl	8007260 <USBD_CtlSendStatus>
 8005fac:	e032      	b.n	8006014 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fa37 	bl	800642c <USBD_CoreFindEP>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fc2:	7dbb      	ldrb	r3, [r7, #22]
 8005fc4:	2bff      	cmp	r3, #255	@ 0xff
 8005fc6:	d025      	beq.n	8006014 <USBD_LL_DataOutStage+0x15c>
 8005fc8:	7dbb      	ldrb	r3, [r7, #22]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d122      	bne.n	8006014 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d117      	bne.n	800600a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005fda:	7dba      	ldrb	r2, [r7, #22]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	32ae      	adds	r2, #174	@ 0xae
 8005fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005fea:	7dba      	ldrb	r2, [r7, #22]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005ff2:	7dba      	ldrb	r2, [r7, #22]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	32ae      	adds	r2, #174	@ 0xae
 8005ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	7afa      	ldrb	r2, [r7, #11]
 8006000:	4611      	mov	r1, r2
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	4798      	blx	r3
 8006006:	4603      	mov	r3, r0
 8006008:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	e000      	b.n	8006016 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	460b      	mov	r3, r1
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800602c:	7afb      	ldrb	r3, [r7, #11]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d16f      	bne.n	8006112 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3314      	adds	r3, #20
 8006036:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800603e:	2b02      	cmp	r3, #2
 8006040:	d15a      	bne.n	80060f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d914      	bls.n	8006078 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	461a      	mov	r2, r3
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 f8bc 	bl	80071e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800606a:	2300      	movs	r3, #0
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f001 fe09 	bl	8007c88 <USBD_LL_PrepareReceive>
 8006076:	e03f      	b.n	80060f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	429a      	cmp	r2, r3
 8006082:	d11c      	bne.n	80060be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800608c:	429a      	cmp	r2, r3
 800608e:	d316      	bcc.n	80060be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800609a:	429a      	cmp	r2, r3
 800609c:	d20f      	bcs.n	80060be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800609e:	2200      	movs	r2, #0
 80060a0:	2100      	movs	r1, #0
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f001 f89d 	bl	80071e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060b0:	2300      	movs	r3, #0
 80060b2:	2200      	movs	r2, #0
 80060b4:	2100      	movs	r1, #0
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f001 fde6 	bl	8007c88 <USBD_LL_PrepareReceive>
 80060bc:	e01c      	b.n	80060f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d10f      	bne.n	80060ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ea:	2180      	movs	r1, #128	@ 0x80
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f001 fd21 	bl	8007b34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 f8c7 	bl	8007286 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d03a      	beq.n	8006178 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff fe42 	bl	8005d8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006110:	e032      	b.n	8006178 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006112:	7afb      	ldrb	r3, [r7, #11]
 8006114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006118:	b2db      	uxtb	r3, r3
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f985 	bl	800642c <USBD_CoreFindEP>
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2bff      	cmp	r3, #255	@ 0xff
 800612a:	d025      	beq.n	8006178 <USBD_LL_DataInStage+0x15a>
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d122      	bne.n	8006178 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b03      	cmp	r3, #3
 800613c:	d11c      	bne.n	8006178 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800613e:	7dfa      	ldrb	r2, [r7, #23]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	32ae      	adds	r2, #174	@ 0xae
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d014      	beq.n	8006178 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800614e:	7dfa      	ldrb	r2, [r7, #23]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006156:	7dfa      	ldrb	r2, [r7, #23]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	32ae      	adds	r2, #174	@ 0xae
 800615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	7afa      	ldrb	r2, [r7, #11]
 8006164:	4611      	mov	r1, r2
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	4798      	blx	r3
 800616a:	4603      	mov	r3, r0
 800616c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800616e:	7dbb      	ldrb	r3, [r7, #22]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006174:	7dbb      	ldrb	r3, [r7, #22]
 8006176:	e000      	b.n	800617a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d014      	beq.n	80061e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6852      	ldr	r2, [r2, #4]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	4611      	mov	r1, r2
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061e8:	2340      	movs	r3, #64	@ 0x40
 80061ea:	2200      	movs	r2, #0
 80061ec:	2100      	movs	r1, #0
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fc5b 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2240      	movs	r2, #64	@ 0x40
 8006200:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006204:	2340      	movs	r3, #64	@ 0x40
 8006206:	2200      	movs	r2, #0
 8006208:	2180      	movs	r1, #128	@ 0x80
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fc4d 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2240      	movs	r2, #64	@ 0x40
 800621a:	621a      	str	r2, [r3, #32]

  return ret;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b04      	cmp	r3, #4
 8006258:	d006      	beq.n	8006268 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006260:	b2da      	uxtb	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2204      	movs	r2, #4
 800626c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b04      	cmp	r3, #4
 8006290:	d106      	bne.n	80062a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006298:	b2da      	uxtb	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d110      	bne.n	80062e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	32ae      	adds	r2, #174	@ 0xae
 8006304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800630c:	2303      	movs	r3, #3
 800630e:	e01c      	b.n	800634a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b03      	cmp	r3, #3
 800631a:	d115      	bne.n	8006348 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	32ae      	adds	r2, #174	@ 0xae
 8006326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	32ae      	adds	r2, #174	@ 0xae
 800633a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	4611      	mov	r1, r2
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	32ae      	adds	r2, #174	@ 0xae
 8006368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	e01c      	b.n	80063ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d115      	bne.n	80063ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	32ae      	adds	r2, #174	@ 0xae
 800638a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	@ 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	4611      	mov	r1, r2
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6852      	ldr	r2, [r2, #4]
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	4611      	mov	r1, r2
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800641e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006438:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b086      	sub	sp, #24
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	885b      	ldrh	r3, [r3, #2]
 8006462:	b29b      	uxth	r3, r3
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	4293      	cmp	r3, r2
 800646a:	d91f      	bls.n	80064ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006472:	e013      	b.n	800649c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006474:	f107 030a 	add.w	r3, r7, #10
 8006478:	4619      	mov	r1, r3
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f000 f81b 	bl	80064b6 <USBD_GetNextDesc>
 8006480:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b05      	cmp	r3, #5
 8006488:	d108      	bne.n	800649c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	789b      	ldrb	r3, [r3, #2]
 8006492:	78fa      	ldrb	r2, [r7, #3]
 8006494:	429a      	cmp	r2, r3
 8006496:	d008      	beq.n	80064aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	885b      	ldrh	r3, [r3, #2]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	897b      	ldrh	r3, [r7, #10]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d8e5      	bhi.n	8006474 <USBD_GetEpDesc+0x2e>
 80064a8:	e000      	b.n	80064ac <USBD_GetEpDesc+0x66>
          break;
 80064aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80064ac:	693b      	ldr	r3, [r7, #16]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	7812      	ldrb	r2, [r2, #0]
 80064cc:	4413      	add	r3, r2
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b087      	sub	sp, #28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3301      	adds	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800650c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	b21a      	sxth	r2, r3
 8006514:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006518:	4313      	orrs	r3, r2
 800651a:	b21b      	sxth	r3, r3
 800651c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800651e:	89fb      	ldrh	r3, [r7, #14]
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006542:	2b40      	cmp	r3, #64	@ 0x40
 8006544:	d005      	beq.n	8006552 <USBD_StdDevReq+0x26>
 8006546:	2b40      	cmp	r3, #64	@ 0x40
 8006548:	d857      	bhi.n	80065fa <USBD_StdDevReq+0xce>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00f      	beq.n	800656e <USBD_StdDevReq+0x42>
 800654e:	2b20      	cmp	r3, #32
 8006550:	d153      	bne.n	80065fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	32ae      	adds	r2, #174	@ 0xae
 800655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e04a      	b.n	8006604 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b09      	cmp	r3, #9
 8006574:	d83b      	bhi.n	80065ee <USBD_StdDevReq+0xc2>
 8006576:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <USBD_StdDevReq+0x50>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065d1 	.word	0x080065d1
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080065ef 	.word	0x080065ef
 8006588:	080065db 	.word	0x080065db
 800658c:	080065ef 	.word	0x080065ef
 8006590:	080065af 	.word	0x080065af
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065ef 	.word	0x080065ef
 800659c:	080065c7 	.word	0x080065c7
 80065a0:	080065b9 	.word	0x080065b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa3c 	bl	8006a24 <USBD_GetDescriptor>
          break;
 80065ac:	e024      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fba1 	bl	8006cf8 <USBD_SetAddress>
          break;
 80065b6:	e01f      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fbe0 	bl	8006d80 <USBD_SetConfig>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]
          break;
 80065c4:	e018      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fc83 	bl	8006ed4 <USBD_GetConfig>
          break;
 80065ce:	e013      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fcb4 	bl	8006f40 <USBD_GetStatus>
          break;
 80065d8:	e00e      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fce3 	bl	8006fa8 <USBD_SetFeature>
          break;
 80065e2:	e009      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fd07 	bl	8006ffa <USBD_ClrFeature>
          break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fd5e 	bl	80070b2 <USBD_CtlError>
          break;
 80065f6:	bf00      	nop
      }
      break;
 80065f8:	e004      	b.n	8006604 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fd58 	bl	80070b2 <USBD_CtlError>
      break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d005      	beq.n	8006636 <USBD_StdItfReq+0x26>
 800662a:	2b40      	cmp	r3, #64	@ 0x40
 800662c:	d852      	bhi.n	80066d4 <USBD_StdItfReq+0xc4>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <USBD_StdItfReq+0x26>
 8006632:	2b20      	cmp	r3, #32
 8006634:	d14e      	bne.n	80066d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	2b02      	cmp	r3, #2
 8006642:	d840      	bhi.n	80066c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	889b      	ldrh	r3, [r3, #4]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d836      	bhi.n	80066bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	889b      	ldrh	r3, [r3, #4]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fedb 	bl	8006412 <USBD_CoreFindIF>
 800665c:	4603      	mov	r3, r0
 800665e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	2bff      	cmp	r3, #255	@ 0xff
 8006664:	d01d      	beq.n	80066a2 <USBD_StdItfReq+0x92>
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11a      	bne.n	80066a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800666c:	7bba      	ldrb	r2, [r7, #14]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32ae      	adds	r2, #174	@ 0xae
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00f      	beq.n	800669c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800667c:	7bba      	ldrb	r2, [r7, #14]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006684:	7bba      	ldrb	r2, [r7, #14]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	32ae      	adds	r2, #174	@ 0xae
 800668a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
 8006696:	4603      	mov	r3, r0
 8006698:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800669a:	e004      	b.n	80066a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066a0:	e001      	b.n	80066a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80066a2:	2303      	movs	r3, #3
 80066a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	88db      	ldrh	r3, [r3, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d110      	bne.n	80066d0 <USBD_StdItfReq+0xc0>
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10d      	bne.n	80066d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fdd3 	bl	8007260 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066ba:	e009      	b.n	80066d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fcf7 	bl	80070b2 <USBD_CtlError>
          break;
 80066c4:	e004      	b.n	80066d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fcf2 	bl	80070b2 <USBD_CtlError>
          break;
 80066ce:	e000      	b.n	80066d2 <USBD_StdItfReq+0xc2>
          break;
 80066d0:	bf00      	nop
      }
      break;
 80066d2:	e004      	b.n	80066de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fceb 	bl	80070b2 <USBD_CtlError>
      break;
 80066dc:	bf00      	nop
  }

  return ret;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	889b      	ldrh	r3, [r3, #4]
 80066fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006704:	2b40      	cmp	r3, #64	@ 0x40
 8006706:	d007      	beq.n	8006718 <USBD_StdEPReq+0x30>
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	f200 817f 	bhi.w	8006a0c <USBD_StdEPReq+0x324>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d02a      	beq.n	8006768 <USBD_StdEPReq+0x80>
 8006712:	2b20      	cmp	r3, #32
 8006714:	f040 817a 	bne.w	8006a0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fe85 	bl	800642c <USBD_CoreFindEP>
 8006722:	4603      	mov	r3, r0
 8006724:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006726:	7b7b      	ldrb	r3, [r7, #13]
 8006728:	2bff      	cmp	r3, #255	@ 0xff
 800672a:	f000 8174 	beq.w	8006a16 <USBD_StdEPReq+0x32e>
 800672e:	7b7b      	ldrb	r3, [r7, #13]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f040 8170 	bne.w	8006a16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006736:	7b7a      	ldrb	r2, [r7, #13]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800673e:	7b7a      	ldrb	r2, [r7, #13]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	32ae      	adds	r2, #174	@ 0xae
 8006744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8163 	beq.w	8006a16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006750:	7b7a      	ldrb	r2, [r7, #13]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32ae      	adds	r2, #174	@ 0xae
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006766:	e156      	b.n	8006a16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b03      	cmp	r3, #3
 800676e:	d008      	beq.n	8006782 <USBD_StdEPReq+0x9a>
 8006770:	2b03      	cmp	r3, #3
 8006772:	f300 8145 	bgt.w	8006a00 <USBD_StdEPReq+0x318>
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 809b 	beq.w	80068b2 <USBD_StdEPReq+0x1ca>
 800677c:	2b01      	cmp	r3, #1
 800677e:	d03c      	beq.n	80067fa <USBD_StdEPReq+0x112>
 8006780:	e13e      	b.n	8006a00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d002      	beq.n	8006794 <USBD_StdEPReq+0xac>
 800678e:	2b03      	cmp	r3, #3
 8006790:	d016      	beq.n	80067c0 <USBD_StdEPReq+0xd8>
 8006792:	e02c      	b.n	80067ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <USBD_StdEPReq+0xce>
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b80      	cmp	r3, #128	@ 0x80
 800679e:	d00a      	beq.n	80067b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f9c5 	bl	8007b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067aa:	2180      	movs	r1, #128	@ 0x80
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f9c1 	bl	8007b34 <USBD_LL_StallEP>
 80067b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067b4:	e020      	b.n	80067f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fc7a 	bl	80070b2 <USBD_CtlError>
              break;
 80067be:	e01b      	b.n	80067f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	885b      	ldrh	r3, [r3, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10e      	bne.n	80067e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <USBD_StdEPReq+0xfe>
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b80      	cmp	r3, #128	@ 0x80
 80067d2:	d008      	beq.n	80067e6 <USBD_StdEPReq+0xfe>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	88db      	ldrh	r3, [r3, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 f9a7 	bl	8007b34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fd3a 	bl	8007260 <USBD_CtlSendStatus>

              break;
 80067ec:	e004      	b.n	80067f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fc5e 	bl	80070b2 <USBD_CtlError>
              break;
 80067f6:	bf00      	nop
          }
          break;
 80067f8:	e107      	b.n	8006a0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d002      	beq.n	800680c <USBD_StdEPReq+0x124>
 8006806:	2b03      	cmp	r3, #3
 8006808:	d016      	beq.n	8006838 <USBD_StdEPReq+0x150>
 800680a:	e04b      	b.n	80068a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <USBD_StdEPReq+0x146>
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	2b80      	cmp	r3, #128	@ 0x80
 8006816:	d00a      	beq.n	800682e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 f989 	bl	8007b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006822:	2180      	movs	r1, #128	@ 0x80
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 f985 	bl	8007b34 <USBD_LL_StallEP>
 800682a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800682c:	e040      	b.n	80068b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fc3e 	bl	80070b2 <USBD_CtlError>
              break;
 8006836:	e03b      	b.n	80068b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	885b      	ldrh	r3, [r3, #2]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d136      	bne.n	80068ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 f98f 	bl	8007b72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fd03 	bl	8007260 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fde4 	bl	800642c <USBD_CoreFindEP>
 8006864:	4603      	mov	r3, r0
 8006866:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006868:	7b7b      	ldrb	r3, [r7, #13]
 800686a:	2bff      	cmp	r3, #255	@ 0xff
 800686c:	d01f      	beq.n	80068ae <USBD_StdEPReq+0x1c6>
 800686e:	7b7b      	ldrb	r3, [r7, #13]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11c      	bne.n	80068ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006874:	7b7a      	ldrb	r2, [r7, #13]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800687c:	7b7a      	ldrb	r2, [r7, #13]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32ae      	adds	r2, #174	@ 0xae
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800688c:	7b7a      	ldrb	r2, [r7, #13]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32ae      	adds	r2, #174	@ 0xae
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80068a2:	e004      	b.n	80068ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fc03 	bl	80070b2 <USBD_CtlError>
              break;
 80068ac:	e000      	b.n	80068b0 <USBD_StdEPReq+0x1c8>
              break;
 80068ae:	bf00      	nop
          }
          break;
 80068b0:	e0ab      	b.n	8006a0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d002      	beq.n	80068c4 <USBD_StdEPReq+0x1dc>
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d032      	beq.n	8006928 <USBD_StdEPReq+0x240>
 80068c2:	e097      	b.n	80069f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <USBD_StdEPReq+0x1f2>
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	2b80      	cmp	r3, #128	@ 0x80
 80068ce:	d004      	beq.n	80068da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fbed 	bl	80070b2 <USBD_CtlError>
                break;
 80068d8:	e091      	b.n	80069fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da0b      	bge.n	80068fa <USBD_StdEPReq+0x212>
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	e00b      	b.n	8006912 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4413      	add	r3, r2
 8006910:	3304      	adds	r3, #4
 8006912:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2202      	movs	r2, #2
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fc43 	bl	80071ac <USBD_CtlSendData>
              break;
 8006926:	e06a      	b.n	80069fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da11      	bge.n	8006954 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	3324      	adds	r3, #36	@ 0x24
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d117      	bne.n	800697a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fbb0 	bl	80070b2 <USBD_CtlError>
                  break;
 8006952:	e054      	b.n	80069fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	f003 020f 	and.w	r2, r3, #15
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fb9d 	bl	80070b2 <USBD_CtlError>
                  break;
 8006978:	e041      	b.n	80069fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800697e:	2b00      	cmp	r3, #0
 8006980:	da0b      	bge.n	800699a <USBD_StdEPReq+0x2b2>
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	3310      	adds	r3, #16
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	3304      	adds	r3, #4
 8006998:	e00b      	b.n	80069b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4413      	add	r3, r2
 80069b0:	3304      	adds	r3, #4
 80069b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <USBD_StdEPReq+0x2d8>
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b80      	cmp	r3, #128	@ 0x80
 80069be:	d103      	bne.n	80069c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e00e      	b.n	80069e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f8ef 	bl	8007bb0 <USBD_LL_IsStallEP>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e002      	b.n	80069e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2202      	movs	r2, #2
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fbdd 	bl	80071ac <USBD_CtlSendData>
              break;
 80069f2:	e004      	b.n	80069fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fb5b 	bl	80070b2 <USBD_CtlError>
              break;
 80069fc:	bf00      	nop
          }
          break;
 80069fe:	e004      	b.n	8006a0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fb55 	bl	80070b2 <USBD_CtlError>
          break;
 8006a08:	bf00      	nop
      }
      break;
 8006a0a:	e005      	b.n	8006a18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fb4f 	bl	80070b2 <USBD_CtlError>
      break;
 8006a14:	e000      	b.n	8006a18 <USBD_StdEPReq+0x330>
      break;
 8006a16:	bf00      	nop
  }

  return ret;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	2b06      	cmp	r3, #6
 8006a46:	f200 8128 	bhi.w	8006c9a <USBD_GetDescriptor+0x276>
 8006a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <USBD_GetDescriptor+0x2c>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006ac5 	.word	0x08006ac5
 8006a5c:	08006c9b 	.word	0x08006c9b
 8006a60:	08006c9b 	.word	0x08006c9b
 8006a64:	08006c3b 	.word	0x08006c3b
 8006a68:	08006c67 	.word	0x08006c67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	7c12      	ldrb	r2, [r2, #16]
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
 8006a80:	60f8      	str	r0, [r7, #12]
      break;
 8006a82:	e112      	b.n	8006caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7c1b      	ldrb	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10d      	bne.n	8006aa8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	f107 0208 	add.w	r2, r7, #8
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
 8006a9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006aa6:	e100      	b.n	8006caa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	f107 0208 	add.w	r2, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	2202      	movs	r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
      break;
 8006ac2:	e0f2      	b.n	8006caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	885b      	ldrh	r3, [r3, #2]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	f200 80ac 	bhi.w	8006c28 <USBD_GetDescriptor+0x204>
 8006ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <USBD_GetDescriptor+0xb4>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006af1 	.word	0x08006af1
 8006adc:	08006b25 	.word	0x08006b25
 8006ae0:	08006b59 	.word	0x08006b59
 8006ae4:	08006b8d 	.word	0x08006b8d
 8006ae8:	08006bc1 	.word	0x08006bc1
 8006aec:	08006bf5 	.word	0x08006bf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	7c12      	ldrb	r2, [r2, #16]
 8006b08:	f107 0108 	add.w	r1, r7, #8
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4798      	blx	r3
 8006b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b12:	e091      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 facb 	bl	80070b2 <USBD_CtlError>
            err++;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	72fb      	strb	r3, [r7, #11]
          break;
 8006b22:	e089      	b.n	8006c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	7c12      	ldrb	r2, [r2, #16]
 8006b3c:	f107 0108 	add.w	r1, r7, #8
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
 8006b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b46:	e077      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fab1 	bl	80070b2 <USBD_CtlError>
            err++;
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	3301      	adds	r3, #1
 8006b54:	72fb      	strb	r3, [r7, #11]
          break;
 8006b56:	e06f      	b.n	8006c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7c12      	ldrb	r2, [r2, #16]
 8006b70:	f107 0108 	add.w	r1, r7, #8
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7a:	e05d      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa97 	bl	80070b2 <USBD_CtlError>
            err++;
 8006b84:	7afb      	ldrb	r3, [r7, #11]
 8006b86:	3301      	adds	r3, #1
 8006b88:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8a:	e055      	b.n	8006c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	7c12      	ldrb	r2, [r2, #16]
 8006ba4:	f107 0108 	add.w	r1, r7, #8
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
 8006bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bae:	e043      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa7d 	bl	80070b2 <USBD_CtlError>
            err++;
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bbe:	e03b      	b.n	8006c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	7c12      	ldrb	r2, [r2, #16]
 8006bd8:	f107 0108 	add.w	r1, r7, #8
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4798      	blx	r3
 8006be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006be2:	e029      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa63 	bl	80070b2 <USBD_CtlError>
            err++;
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bf2:	e021      	b.n	8006c38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	7c12      	ldrb	r2, [r2, #16]
 8006c0c:	f107 0108 	add.w	r1, r7, #8
 8006c10:	4610      	mov	r0, r2
 8006c12:	4798      	blx	r3
 8006c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c16:	e00f      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fa49 	bl	80070b2 <USBD_CtlError>
            err++;
 8006c20:	7afb      	ldrb	r3, [r7, #11]
 8006c22:	3301      	adds	r3, #1
 8006c24:	72fb      	strb	r3, [r7, #11]
          break;
 8006c26:	e007      	b.n	8006c38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa41 	bl	80070b2 <USBD_CtlError>
          err++;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c36:	bf00      	nop
      }
      break;
 8006c38:	e037      	b.n	8006caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	7c1b      	ldrb	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4a:	f107 0208 	add.w	r2, r7, #8
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4798      	blx	r3
 8006c52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c54:	e029      	b.n	8006caa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa2a 	bl	80070b2 <USBD_CtlError>
        err++;
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	3301      	adds	r3, #1
 8006c62:	72fb      	strb	r3, [r7, #11]
      break;
 8006c64:	e021      	b.n	8006caa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	7c1b      	ldrb	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10d      	bne.n	8006c8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c76:	f107 0208 	add.w	r2, r7, #8
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	4798      	blx	r3
 8006c7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3301      	adds	r3, #1
 8006c84:	2207      	movs	r2, #7
 8006c86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c88:	e00f      	b.n	8006caa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa10 	bl	80070b2 <USBD_CtlError>
        err++;
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	3301      	adds	r3, #1
 8006c96:	72fb      	strb	r3, [r7, #11]
      break;
 8006c98:	e007      	b.n	8006caa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fa08 	bl	80070b2 <USBD_CtlError>
      err++;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ca8:	bf00      	nop
  }

  if (err != 0U)
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11e      	bne.n	8006cee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	88db      	ldrh	r3, [r3, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d016      	beq.n	8006ce6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006cb8:	893b      	ldrh	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00e      	beq.n	8006cdc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	88da      	ldrh	r2, [r3, #6]
 8006cc2:	893b      	ldrh	r3, [r7, #8]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bf28      	it	cs
 8006cc8:	4613      	movcs	r3, r2
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cce:	893b      	ldrh	r3, [r7, #8]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa69 	bl	80071ac <USBD_CtlSendData>
 8006cda:	e009      	b.n	8006cf0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f9e7 	bl	80070b2 <USBD_CtlError>
 8006ce4:	e004      	b.n	8006cf0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 faba 	bl	8007260 <USBD_CtlSendStatus>
 8006cec:	e000      	b.n	8006cf0 <USBD_GetDescriptor+0x2cc>
    return;
 8006cee:	bf00      	nop
  }
}
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	889b      	ldrh	r3, [r3, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d131      	bne.n	8006d6e <USBD_SetAddress+0x76>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	88db      	ldrh	r3, [r3, #6]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d12d      	bne.n	8006d6e <USBD_SetAddress+0x76>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d18:	d829      	bhi.n	8006d6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	885b      	ldrh	r3, [r3, #2]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d104      	bne.n	8006d3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f9bc 	bl	80070b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3a:	e01d      	b.n	8006d78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	7bfa      	ldrb	r2, [r7, #15]
 8006d40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 ff5d 	bl	8007c08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa86 	bl	8007260 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d62:	e009      	b.n	8006d78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	e004      	b.n	8006d78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f99e 	bl	80070b2 <USBD_CtlError>
  }
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	4b4e      	ldr	r3, [pc, #312]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006d96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d98:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d905      	bls.n	8006dac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f985 	bl	80070b2 <USBD_CtlError>
    return USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e08c      	b.n	8006ec6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d002      	beq.n	8006dbe <USBD_SetConfig+0x3e>
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d029      	beq.n	8006e10 <USBD_SetConfig+0x90>
 8006dbc:	e075      	b.n	8006eaa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006dbe:	4b44      	ldr	r3, [pc, #272]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d020      	beq.n	8006e08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006dc6:	4b42      	ldr	r3, [pc, #264]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fe ffe3 	bl	8005da2 <USBD_SetClassConfig>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f962 	bl	80070b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006df6:	e065      	b.n	8006ec4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa31 	bl	8007260 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2203      	movs	r2, #3
 8006e02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e06:	e05d      	b.n	8006ec4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa29 	bl	8007260 <USBD_CtlSendStatus>
      break;
 8006e0e:	e059      	b.n	8006ec4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e10:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d112      	bne.n	8006e3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006e20:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e2a:	4b29      	ldr	r3, [pc, #164]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7fe ffd2 	bl	8005dda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa12 	bl	8007260 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e3c:	e042      	b.n	8006ec4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e3e:	4b24      	ldr	r3, [pc, #144]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d02a      	beq.n	8006ea2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fe ffc0 	bl	8005dda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e64:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fe ff99 	bl	8005da2 <USBD_SetClassConfig>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00f      	beq.n	8006e9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f918 	bl	80070b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fe ffa5 	bl	8005dda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e98:	e014      	b.n	8006ec4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f9e0 	bl	8007260 <USBD_CtlSendStatus>
      break;
 8006ea0:	e010      	b.n	8006ec4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f9dc 	bl	8007260 <USBD_CtlSendStatus>
      break;
 8006ea8:	e00c      	b.n	8006ec4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f900 	bl	80070b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eb2:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <USBD_SetConfig+0x150>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fe ff8e 	bl	8005dda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec2:	bf00      	nop
  }

  return ret;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	2000021c 	.word	0x2000021c

08006ed4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d004      	beq.n	8006ef0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8e2 	bl	80070b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006eee:	e023      	b.n	8006f38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	dc02      	bgt.n	8006f02 <USBD_GetConfig+0x2e>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dc03      	bgt.n	8006f08 <USBD_GetConfig+0x34>
 8006f00:	e015      	b.n	8006f2e <USBD_GetConfig+0x5a>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d00b      	beq.n	8006f1e <USBD_GetConfig+0x4a>
 8006f06:	e012      	b.n	8006f2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3308      	adds	r3, #8
 8006f12:	2201      	movs	r2, #1
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f948 	bl	80071ac <USBD_CtlSendData>
        break;
 8006f1c:	e00c      	b.n	8006f38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2201      	movs	r2, #1
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f940 	bl	80071ac <USBD_CtlSendData>
        break;
 8006f2c:	e004      	b.n	8006f38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8be 	bl	80070b2 <USBD_CtlError>
        break;
 8006f36:	bf00      	nop
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d81e      	bhi.n	8006f96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	88db      	ldrh	r3, [r3, #6]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d004      	beq.n	8006f6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8a5 	bl	80070b2 <USBD_CtlError>
        break;
 8006f68:	e01a      	b.n	8006fa0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f043 0202 	orr.w	r2, r3, #2
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f90c 	bl	80071ac <USBD_CtlSendData>
      break;
 8006f94:	e004      	b.n	8006fa0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f88a 	bl	80070b2 <USBD_CtlError>
      break;
 8006f9e:	bf00      	nop
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d107      	bne.n	8006fca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f94c 	bl	8007260 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006fc8:	e013      	b.n	8006ff2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	885b      	ldrh	r3, [r3, #2]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d10b      	bne.n	8006fea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	889b      	ldrh	r3, [r3, #4]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f93c 	bl	8007260 <USBD_CtlSendStatus>
}
 8006fe8:	e003      	b.n	8006ff2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f860 	bl	80070b2 <USBD_CtlError>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	2b02      	cmp	r3, #2
 8007010:	d80b      	bhi.n	800702a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	885b      	ldrh	r3, [r3, #2]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10c      	bne.n	8007034 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f91c 	bl	8007260 <USBD_CtlSendStatus>
      }
      break;
 8007028:	e004      	b.n	8007034 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f840 	bl	80070b2 <USBD_CtlError>
      break;
 8007032:	e000      	b.n	8007036 <USBD_ClrFeature+0x3c>
      break;
 8007034:	bf00      	nop
  }
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7ff fa40 	bl	80064ee <SWAPBYTE>
 800706e:	4603      	mov	r3, r0
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fa33 	bl	80064ee <SWAPBYTE>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3301      	adds	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff fa26 	bl	80064ee <SWAPBYTE>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	80da      	strh	r2, [r3, #6]
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070bc:	2180      	movs	r1, #128	@ 0x80
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fd38 	bl	8007b34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd34 	bl	8007b34 <USBD_LL_StallEP>
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d042      	beq.n	8007170 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80070ee:	6938      	ldr	r0, [r7, #16]
 80070f0:	f000 f842 	bl	8007178 <USBD_GetLen>
 80070f4:	4603      	mov	r3, r0
 80070f6:	3301      	adds	r3, #1
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070fe:	d808      	bhi.n	8007112 <USBD_GetString+0x3e>
 8007100:	6938      	ldr	r0, [r7, #16]
 8007102:	f000 f839 	bl	8007178 <USBD_GetLen>
 8007106:	4603      	mov	r3, r0
 8007108:	3301      	adds	r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	e001      	b.n	8007116 <USBD_GetString+0x42>
 8007112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	4413      	add	r3, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7812      	ldrb	r2, [r2, #0]
 8007124:	701a      	strb	r2, [r3, #0]
  idx++;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	3301      	adds	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	4413      	add	r3, r2
 8007132:	2203      	movs	r2, #3
 8007134:	701a      	strb	r2, [r3, #0]
  idx++;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	3301      	adds	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800713c:	e013      	b.n	8007166 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4413      	add	r3, r2
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	7812      	ldrb	r2, [r2, #0]
 8007148:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3301      	adds	r3, #1
 800714e:	613b      	str	r3, [r7, #16]
    idx++;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	3301      	adds	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	4413      	add	r3, r2
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	3301      	adds	r3, #1
 8007164:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e7      	bne.n	800713e <USBD_GetString+0x6a>
 800716e:	e000      	b.n	8007172 <USBD_GetString+0x9e>
    return;
 8007170:	bf00      	nop
  }
}
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007188:	e005      	b.n	8007196 <USBD_GetLen+0x1e>
  {
    len++;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	3301      	adds	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	3301      	adds	r3, #1
 8007194:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f5      	bne.n	800718a <USBD_GetLen+0x12>
  }

  return len;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fd37 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	2100      	movs	r1, #0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fd26 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2203      	movs	r2, #3
 8007214:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	2100      	movs	r1, #0
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fd2a 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	2100      	movs	r1, #0
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fd19 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2204      	movs	r2, #4
 800726c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007270:	2300      	movs	r3, #0
 8007272:	2200      	movs	r2, #0
 8007274:	2100      	movs	r1, #0
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fce5 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2205      	movs	r2, #5
 8007292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007296:	2300      	movs	r3, #0
 8007298:	2200      	movs	r2, #0
 800729a:	2100      	movs	r1, #0
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fcf3 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072b0:	2200      	movs	r2, #0
 80072b2:	4912      	ldr	r1, [pc, #72]	@ (80072fc <MX_USB_DEVICE_Init+0x50>)
 80072b4:	4812      	ldr	r0, [pc, #72]	@ (8007300 <MX_USB_DEVICE_Init+0x54>)
 80072b6:	f7fe fcf7 	bl	8005ca8 <USBD_Init>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072c0:	f7f9 fba8 	bl	8000a14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80072c4:	490f      	ldr	r1, [pc, #60]	@ (8007304 <MX_USB_DEVICE_Init+0x58>)
 80072c6:	480e      	ldr	r0, [pc, #56]	@ (8007300 <MX_USB_DEVICE_Init+0x54>)
 80072c8:	f7fe fd1e 	bl	8005d08 <USBD_RegisterClass>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072d2:	f7f9 fb9f 	bl	8000a14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80072d6:	490c      	ldr	r1, [pc, #48]	@ (8007308 <MX_USB_DEVICE_Init+0x5c>)
 80072d8:	4809      	ldr	r0, [pc, #36]	@ (8007300 <MX_USB_DEVICE_Init+0x54>)
 80072da:	f7fe fc15 	bl	8005b08 <USBD_CDC_RegisterInterface>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072e4:	f7f9 fb96 	bl	8000a14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072e8:	4805      	ldr	r0, [pc, #20]	@ (8007300 <MX_USB_DEVICE_Init+0x54>)
 80072ea:	f7fe fd43 	bl	8005d74 <USBD_Start>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072f4:	f7f9 fb8e 	bl	8000a14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	200000ac 	.word	0x200000ac
 8007300:	20000220 	.word	0x20000220
 8007304:	20000018 	.word	0x20000018
 8007308:	20000098 	.word	0x20000098

0800730c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007310:	2200      	movs	r2, #0
 8007312:	4905      	ldr	r1, [pc, #20]	@ (8007328 <CDC_Init_FS+0x1c>)
 8007314:	4805      	ldr	r0, [pc, #20]	@ (800732c <CDC_Init_FS+0x20>)
 8007316:	f7fe fc11 	bl	8005b3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800731a:	4905      	ldr	r1, [pc, #20]	@ (8007330 <CDC_Init_FS+0x24>)
 800731c:	4803      	ldr	r0, [pc, #12]	@ (800732c <CDC_Init_FS+0x20>)
 800731e:	f7fe fc2f 	bl	8005b80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007324:	4618      	mov	r0, r3
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000cfc 	.word	0x20000cfc
 800732c:	20000220 	.word	0x20000220
 8007330:	200004fc 	.word	0x200004fc

08007334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800733a:	4618      	mov	r0, r3
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
 8007350:	4613      	mov	r3, r2
 8007352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	2b23      	cmp	r3, #35	@ 0x23
 8007358:	d84a      	bhi.n	80073f0 <CDC_Control_FS+0xac>
 800735a:	a201      	add	r2, pc, #4	@ (adr r2, 8007360 <CDC_Control_FS+0x1c>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	080073f1 	.word	0x080073f1
 8007364:	080073f1 	.word	0x080073f1
 8007368:	080073f1 	.word	0x080073f1
 800736c:	080073f1 	.word	0x080073f1
 8007370:	080073f1 	.word	0x080073f1
 8007374:	080073f1 	.word	0x080073f1
 8007378:	080073f1 	.word	0x080073f1
 800737c:	080073f1 	.word	0x080073f1
 8007380:	080073f1 	.word	0x080073f1
 8007384:	080073f1 	.word	0x080073f1
 8007388:	080073f1 	.word	0x080073f1
 800738c:	080073f1 	.word	0x080073f1
 8007390:	080073f1 	.word	0x080073f1
 8007394:	080073f1 	.word	0x080073f1
 8007398:	080073f1 	.word	0x080073f1
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	080073f1 	.word	0x080073f1
 80073a4:	080073f1 	.word	0x080073f1
 80073a8:	080073f1 	.word	0x080073f1
 80073ac:	080073f1 	.word	0x080073f1
 80073b0:	080073f1 	.word	0x080073f1
 80073b4:	080073f1 	.word	0x080073f1
 80073b8:	080073f1 	.word	0x080073f1
 80073bc:	080073f1 	.word	0x080073f1
 80073c0:	080073f1 	.word	0x080073f1
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	080073f1 	.word	0x080073f1
 80073d4:	080073f1 	.word	0x080073f1
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	080073f1 	.word	0x080073f1
 80073e0:	080073f1 	.word	0x080073f1
 80073e4:	080073f1 	.word	0x080073f1
 80073e8:	080073f1 	.word	0x080073f1
 80073ec:	080073f1 	.word	0x080073f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80073f0:	bf00      	nop
  }

  return (USBD_OK);
 80073f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4805      	ldr	r0, [pc, #20]	@ (8007424 <CDC_Receive_FS+0x24>)
 800740e:	f7fe fbb7 	bl	8005b80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007412:	4804      	ldr	r0, [pc, #16]	@ (8007424 <CDC_Receive_FS+0x24>)
 8007414:	f7fe fc12 	bl	8005c3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007418:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000220 	.word	0x20000220

08007428 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
    uint32_t TimeStart = HAL_GetTick();
 8007438:	f7f9 fce4 	bl	8000e04 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800743e:	4b1b      	ldr	r3, [pc, #108]	@ (80074ac <CDC_Transmit_FS+0x84>)
 8007440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007444:	60fb      	str	r3, [r7, #12]
    //if (hcdc->TxState != 0) return USBD_BUSY;
    while(hcdc->TxState)
 8007446:	bf00      	nop
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <CDC_Transmit_FS+0x3e>
    {
        if(HAL_GetTick()-TimeStart > 10)
 8007452:	f7f9 fcd7 	bl	8000e04 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b0a      	cmp	r3, #10
 800745e:	d901      	bls.n	8007464 <CDC_Transmit_FS+0x3c>
    return USBD_BUSY;
 8007460:	2301      	movs	r3, #1
 8007462:	e01e      	b.n	80074a2 <CDC_Transmit_FS+0x7a>
        else
    break;
 8007464:	bf00      	nop
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007466:	887b      	ldrh	r3, [r7, #2]
 8007468:	461a      	mov	r2, r3
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	480f      	ldr	r0, [pc, #60]	@ (80074ac <CDC_Transmit_FS+0x84>)
 800746e:	f7fe fb65 	bl	8005b3c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007472:	480e      	ldr	r0, [pc, #56]	@ (80074ac <CDC_Transmit_FS+0x84>)
 8007474:	f7fe fba2 	bl	8005bbc <USBD_CDC_TransmitPacket>
 8007478:	4603      	mov	r3, r0
 800747a:	75fb      	strb	r3, [r7, #23]
    TimeStart = HAL_GetTick();
 800747c:	f7f9 fcc2 	bl	8000e04 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]
    while(hcdc->TxState)
 8007482:	e008      	b.n	8007496 <CDC_Transmit_FS+0x6e>
      {
          if(HAL_GetTick()-TimeStart > 10)
 8007484:	f7f9 fcbe 	bl	8000e04 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b0a      	cmp	r3, #10
 8007490:	d901      	bls.n	8007496 <CDC_Transmit_FS+0x6e>
            return USBD_BUSY;
 8007492:	2301      	movs	r3, #1
 8007494:	e005      	b.n	80074a2 <CDC_Transmit_FS+0x7a>
    while(hcdc->TxState)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f1      	bne.n	8007484 <CDC_Transmit_FS+0x5c>
      }
  /* USER CODE END 7 */
  return result;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000220 	.word	0x20000220

080074b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <usb_printf>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

#include <stdarg.h>
 
void usb_printf(const char *format, ...)
{
 80074d4:	b40f      	push	{r0, r1, r2, r3}
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
 
    va_start(args, format);
 80074dc:	f107 0314 	add.w	r3, r7, #20
 80074e0:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80074ea:	4809      	ldr	r0, [pc, #36]	@ (8007510 <usb_printf+0x3c>)
 80074ec:	f000 fc72 	bl	8007dd4 <vsniprintf>
 80074f0:	4603      	mov	r3, r0
 80074f2:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	4805      	ldr	r0, [pc, #20]	@ (8007510 <usb_printf+0x3c>)
 80074fc:	f7ff ff94 	bl	8007428 <CDC_Transmit_FS>
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750a:	b004      	add	sp, #16
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000cfc 	.word	0x20000cfc

08007514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2212      	movs	r2, #18
 8007524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007526:	4b03      	ldr	r3, [pc, #12]	@ (8007534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	200000c8 	.word	0x200000c8

08007538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2204      	movs	r2, #4
 8007548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800754a:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	200000dc 	.word	0x200000dc

0800755c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4907      	ldr	r1, [pc, #28]	@ (8007590 <USBD_FS_ProductStrDescriptor+0x34>)
 8007572:	4808      	ldr	r0, [pc, #32]	@ (8007594 <USBD_FS_ProductStrDescriptor+0x38>)
 8007574:	f7ff fdae 	bl	80070d4 <USBD_GetString>
 8007578:	e004      	b.n	8007584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4904      	ldr	r1, [pc, #16]	@ (8007590 <USBD_FS_ProductStrDescriptor+0x34>)
 800757e:	4805      	ldr	r0, [pc, #20]	@ (8007594 <USBD_FS_ProductStrDescriptor+0x38>)
 8007580:	f7ff fda8 	bl	80070d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007584:	4b02      	ldr	r3, [pc, #8]	@ (8007590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	200014fc 	.word	0x200014fc
 8007594:	08008728 	.word	0x08008728

08007598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	4904      	ldr	r1, [pc, #16]	@ (80075b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075a8:	4804      	ldr	r0, [pc, #16]	@ (80075bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075aa:	f7ff fd93 	bl	80070d4 <USBD_GetString>
  return USBD_StrDesc;
 80075ae:	4b02      	ldr	r3, [pc, #8]	@ (80075b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	200014fc 	.word	0x200014fc
 80075bc:	08008740 	.word	0x08008740

080075c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	221a      	movs	r2, #26
 80075d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075d2:	f000 f843 	bl	800765c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075d6:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200000e0 	.word	0x200000e0

080075e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4907      	ldr	r1, [pc, #28]	@ (8007618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075fa:	4808      	ldr	r0, [pc, #32]	@ (800761c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075fc:	f7ff fd6a 	bl	80070d4 <USBD_GetString>
 8007600:	e004      	b.n	800760c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4904      	ldr	r1, [pc, #16]	@ (8007618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007606:	4805      	ldr	r0, [pc, #20]	@ (800761c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007608:	f7ff fd64 	bl	80070d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800760c:	4b02      	ldr	r3, [pc, #8]	@ (8007618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200014fc 	.word	0x200014fc
 800761c:	08008754 	.word	0x08008754

08007620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4907      	ldr	r1, [pc, #28]	@ (8007654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007636:	4808      	ldr	r0, [pc, #32]	@ (8007658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007638:	f7ff fd4c 	bl	80070d4 <USBD_GetString>
 800763c:	e004      	b.n	8007648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4904      	ldr	r1, [pc, #16]	@ (8007654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007642:	4805      	ldr	r0, [pc, #20]	@ (8007658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007644:	f7ff fd46 	bl	80070d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007648:	4b02      	ldr	r3, [pc, #8]	@ (8007654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200014fc 	.word	0x200014fc
 8007658:	08008760 	.word	0x08008760

0800765c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <Get_SerialNum+0x44>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007668:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <Get_SerialNum+0x48>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800766e:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <Get_SerialNum+0x4c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007682:	2208      	movs	r2, #8
 8007684:	4909      	ldr	r1, [pc, #36]	@ (80076ac <Get_SerialNum+0x50>)
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f814 	bl	80076b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800768c:	2204      	movs	r2, #4
 800768e:	4908      	ldr	r1, [pc, #32]	@ (80076b0 <Get_SerialNum+0x54>)
 8007690:	68b8      	ldr	r0, [r7, #8]
 8007692:	f000 f80f 	bl	80076b4 <IntToUnicode>
  }
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	1fff7a10 	.word	0x1fff7a10
 80076a4:	1fff7a14 	.word	0x1fff7a14
 80076a8:	1fff7a18 	.word	0x1fff7a18
 80076ac:	200000e2 	.word	0x200000e2
 80076b0:	200000f2 	.word	0x200000f2

080076b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	75fb      	strb	r3, [r7, #23]
 80076ca:	e027      	b.n	800771c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	0f1b      	lsrs	r3, r3, #28
 80076d0:	2b09      	cmp	r3, #9
 80076d2:	d80b      	bhi.n	80076ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4619      	mov	r1, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	440b      	add	r3, r1
 80076e4:	3230      	adds	r2, #48	@ 0x30
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e00a      	b.n	8007702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	0f1b      	lsrs	r3, r3, #28
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	4619      	mov	r1, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	440b      	add	r3, r1
 80076fc:	3237      	adds	r2, #55	@ 0x37
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	3301      	adds	r3, #1
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	3301      	adds	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]
 800771c:	7dfa      	ldrb	r2, [r7, #23]
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	429a      	cmp	r2, r3
 8007722:	d3d3      	bcc.n	80076cc <IntToUnicode+0x18>
  }
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	@ 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	609a      	str	r2, [r3, #8]
 8007748:	60da      	str	r2, [r3, #12]
 800774a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007754:	d147      	bne.n	80077e6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	4b25      	ldr	r3, [pc, #148]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 800775c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775e:	4a24      	ldr	r2, [pc, #144]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	6313      	str	r3, [r2, #48]	@ 0x30
 8007766:	4b22      	ldr	r3, [pc, #136]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4619      	mov	r1, r3
 8007786:	481b      	ldr	r0, [pc, #108]	@ (80077f4 <HAL_PCD_MspInit+0xc0>)
 8007788:	f7f9 fca0 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800778c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007792:	2302      	movs	r3, #2
 8007794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800779a:	2300      	movs	r3, #0
 800779c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800779e:	230a      	movs	r3, #10
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a2:	f107 0314 	add.w	r3, r7, #20
 80077a6:	4619      	mov	r1, r3
 80077a8:	4812      	ldr	r0, [pc, #72]	@ (80077f4 <HAL_PCD_MspInit+0xc0>)
 80077aa:	f7f9 fc8f 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077ae:	4b10      	ldr	r3, [pc, #64]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 80077b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b2:	4a0f      	ldr	r2, [pc, #60]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 80077b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	4a0b      	ldr	r2, [pc, #44]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 80077c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80077ca:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <HAL_PCD_MspInit+0xbc>)
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077d6:	2200      	movs	r2, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	2043      	movs	r0, #67	@ 0x43
 80077dc:	f7f9 fc1d 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077e0:	2043      	movs	r0, #67	@ 0x43
 80077e2:	f7f9 fc36 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077e6:	bf00      	nop
 80077e8:	3728      	adds	r7, #40	@ 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40023800 	.word	0x40023800
 80077f4:	40020000 	.word	0x40020000

080077f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7fe fafd 	bl	8005e0e <USBD_LL_SetupStage>
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	4619      	mov	r1, r3
 8007846:	f7fe fb37 	bl	8005eb8 <USBD_LL_DataOutStage>
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3320      	adds	r3, #32
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	4619      	mov	r1, r3
 800787a:	f7fe fbd0 	bl	800601e <USBD_LL_DataInStage>
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fd0a 	bl	80062ae <USBD_LL_SOF>
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078aa:	2301      	movs	r3, #1
 80078ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	79db      	ldrb	r3, [r3, #7]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e008      	b.n	80078ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	79db      	ldrb	r3, [r3, #7]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d102      	bne.n	80078ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
 80078c8:	e001      	b.n	80078ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078ca:	f7f9 f8a3 	bl	8000a14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078d4:	7bfa      	ldrb	r2, [r7, #15]
 80078d6:	4611      	mov	r1, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fca4 	bl	8006226 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fc4c 	bl	8006182 <USBD_LL_Reset>
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fc9f 	bl	8006246 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7adb      	ldrb	r3, [r3, #11]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007928:	4b04      	ldr	r3, [pc, #16]	@ (800793c <HAL_PCD_SuspendCallback+0x48>)
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	4a03      	ldr	r2, [pc, #12]	@ (800793c <HAL_PCD_SuspendCallback+0x48>)
 800792e:	f043 0306 	orr.w	r3, r3, #6
 8007932:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fc95 	bl	800627e <USBD_LL_Resume>
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fced 	bl	8006352 <USBD_LL_IsoOUTIncomplete>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fca9 	bl	80062ee <USBD_LL_IsoINIncomplete>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fcff 	bl	80063b6 <USBD_LL_DevConnected>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fcfc 	bl	80063cc <USBD_LL_DevDisconnected>
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d13c      	bne.n	8007a66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079ec:	4a20      	ldr	r2, [pc, #128]	@ (8007a70 <USBD_LL_Init+0x94>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a70 <USBD_LL_Init+0x94>)
 80079f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a70 <USBD_LL_Init+0x94>)
 80079fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a04:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a06:	2204      	movs	r2, #4
 8007a08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a0a:	4b19      	ldr	r3, [pc, #100]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a10:	4b17      	ldr	r3, [pc, #92]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a16:	4b16      	ldr	r3, [pc, #88]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a18:	2202      	movs	r2, #2
 8007a1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a1c:	4b14      	ldr	r3, [pc, #80]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a22:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a28:	4b11      	ldr	r3, [pc, #68]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a2e:	4b10      	ldr	r3, [pc, #64]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a3a:	480d      	ldr	r0, [pc, #52]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a3c:	f7f9 fe7e 	bl	800173c <HAL_PCD_Init>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a46:	f7f8 ffe5 	bl	8000a14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a4a:	2180      	movs	r1, #128	@ 0x80
 8007a4c:	4808      	ldr	r0, [pc, #32]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a4e:	f7fb f8aa 	bl	8002ba6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a52:	2240      	movs	r2, #64	@ 0x40
 8007a54:	2100      	movs	r1, #0
 8007a56:	4806      	ldr	r0, [pc, #24]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a58:	f7fb f85e 	bl	8002b18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a5c:	2280      	movs	r2, #128	@ 0x80
 8007a5e:	2101      	movs	r1, #1
 8007a60:	4803      	ldr	r0, [pc, #12]	@ (8007a70 <USBD_LL_Init+0x94>)
 8007a62:	f7fb f859 	bl	8002b18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	200016fc 	.word	0x200016fc

08007a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7f9 ff65 	bl	800195a <HAL_PCD_Start>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f942 	bl	8007d20 <USBD_Get_USB_Status>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	70fb      	strb	r3, [r7, #3]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70bb      	strb	r3, [r7, #2]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ad2:	78bb      	ldrb	r3, [r7, #2]
 8007ad4:	883a      	ldrh	r2, [r7, #0]
 8007ad6:	78f9      	ldrb	r1, [r7, #3]
 8007ad8:	f7fa fc39 	bl	800234e <HAL_PCD_EP_Open>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f91c 	bl	8007d20 <USBD_Get_USB_Status>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fa fc84 	bl	8002422 <HAL_PCD_EP_Close>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f8fd 	bl	8007d20 <USBD_Get_USB_Status>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fa fd3c 	bl	80025d0 <HAL_PCD_EP_SetStall>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f8de 	bl	8007d20 <USBD_Get_USB_Status>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fa fd80 	bl	8002696 <HAL_PCD_EP_ClrStall>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f8bf 	bl	8007d20 <USBD_Get_USB_Status>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da0b      	bge.n	8007be4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3316      	adds	r3, #22
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	e00b      	b.n	8007bfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	4613      	mov	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fa fb6d 	bl	8002306 <HAL_PCD_SetAddress>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 f874 	bl	8007d20 <USBD_Get_USB_Status>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	460b      	mov	r3, r1
 8007c54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c64:	7af9      	ldrb	r1, [r7, #11]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	f7fa fc77 	bl	800255c <HAL_PCD_EP_Transmit>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f853 	bl	8007d20 <USBD_Get_USB_Status>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	460b      	mov	r3, r1
 8007c96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ca6:	7af9      	ldrb	r1, [r7, #11]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f7fa fc03 	bl	80024b6 <HAL_PCD_EP_Receive>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f832 	bl	8007d20 <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fa fc23 	bl	800252c <HAL_PCD_EP_GetRxCount>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	@ (8007d08 <USBD_static_malloc+0x18>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20001be0 	.word	0x20001be0

08007d0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d817      	bhi.n	8007d64 <USBD_Get_USB_Status+0x44>
 8007d34:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <USBD_Get_USB_Status+0x1c>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d53 	.word	0x08007d53
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d5f 	.word	0x08007d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	e00b      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	73fb      	strb	r3, [r7, #15]
    break;
 8007d56:	e008      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	e005      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	73fb      	strb	r3, [r7, #15]
    break;
 8007d62:	e002      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	73fb      	strb	r3, [r7, #15]
    break;
 8007d68:	bf00      	nop
  }
  return usb_status;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <_vsniprintf_r>:
 8007d78:	b530      	push	{r4, r5, lr}
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	2c00      	cmp	r4, #0
 8007d7e:	b09b      	sub	sp, #108	@ 0x6c
 8007d80:	4605      	mov	r5, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	da05      	bge.n	8007d92 <_vsniprintf_r+0x1a>
 8007d86:	238b      	movs	r3, #139	@ 0x8b
 8007d88:	6003      	str	r3, [r0, #0]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	b01b      	add	sp, #108	@ 0x6c
 8007d90:	bd30      	pop	{r4, r5, pc}
 8007d92:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	9319      	str	r3, [sp, #100]	@ 0x64
 8007da0:	bf14      	ite	ne
 8007da2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007da6:	4623      	moveq	r3, r4
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	9305      	str	r3, [sp, #20]
 8007dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007db0:	9100      	str	r1, [sp, #0]
 8007db2:	9104      	str	r1, [sp, #16]
 8007db4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007db8:	4669      	mov	r1, sp
 8007dba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007dbc:	f000 f9c8 	bl	8008150 <_svfiprintf_r>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	bfbc      	itt	lt
 8007dc4:	238b      	movlt	r3, #139	@ 0x8b
 8007dc6:	602b      	strlt	r3, [r5, #0]
 8007dc8:	2c00      	cmp	r4, #0
 8007dca:	d0e0      	beq.n	8007d8e <_vsniprintf_r+0x16>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e7dc      	b.n	8007d8e <_vsniprintf_r+0x16>

08007dd4 <vsniprintf>:
 8007dd4:	b507      	push	{r0, r1, r2, lr}
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	460a      	mov	r2, r1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	4803      	ldr	r0, [pc, #12]	@ (8007dec <vsniprintf+0x18>)
 8007de0:	6800      	ldr	r0, [r0, #0]
 8007de2:	f7ff ffc9 	bl	8007d78 <_vsniprintf_r>
 8007de6:	b003      	add	sp, #12
 8007de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dec:	200000fc 	.word	0x200000fc

08007df0 <memmove>:
 8007df0:	4288      	cmp	r0, r1
 8007df2:	b510      	push	{r4, lr}
 8007df4:	eb01 0402 	add.w	r4, r1, r2
 8007df8:	d902      	bls.n	8007e00 <memmove+0x10>
 8007dfa:	4284      	cmp	r4, r0
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	d807      	bhi.n	8007e10 <memmove+0x20>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	42a1      	cmp	r1, r4
 8007e04:	d008      	beq.n	8007e18 <memmove+0x28>
 8007e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e0e:	e7f8      	b.n	8007e02 <memmove+0x12>
 8007e10:	4402      	add	r2, r0
 8007e12:	4601      	mov	r1, r0
 8007e14:	428a      	cmp	r2, r1
 8007e16:	d100      	bne.n	8007e1a <memmove+0x2a>
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e22:	e7f7      	b.n	8007e14 <memmove+0x24>

08007e24 <memset>:
 8007e24:	4402      	add	r2, r0
 8007e26:	4603      	mov	r3, r0
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d100      	bne.n	8007e2e <memset+0xa>
 8007e2c:	4770      	bx	lr
 8007e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e32:	e7f9      	b.n	8007e28 <memset+0x4>

08007e34 <__errno>:
 8007e34:	4b01      	ldr	r3, [pc, #4]	@ (8007e3c <__errno+0x8>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	200000fc 	.word	0x200000fc

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	@ (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	@ (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	@ (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	@ (8007e84 <__libc_init_array+0x44>)
 8007e54:	f000 fc4a 	bl	80086ec <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	080087c4 	.word	0x080087c4
 8007e7c:	080087c4 	.word	0x080087c4
 8007e80:	080087c4 	.word	0x080087c4
 8007e84:	080087c8 	.word	0x080087c8

08007e88 <__retarget_lock_acquire_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <__retarget_lock_release_recursive>:
 8007e8a:	4770      	bx	lr

08007e8c <memcpy>:
 8007e8c:	440a      	add	r2, r1
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e94:	d100      	bne.n	8007e98 <memcpy+0xc>
 8007e96:	4770      	bx	lr
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	d1f9      	bne.n	8007e9a <memcpy+0xe>
 8007ea6:	bd10      	pop	{r4, pc}

08007ea8 <_free_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4605      	mov	r5, r0
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d041      	beq.n	8007f34 <_free_r+0x8c>
 8007eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb4:	1f0c      	subs	r4, r1, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bfb8      	it	lt
 8007eba:	18e4      	addlt	r4, r4, r3
 8007ebc:	f000 f8e0 	bl	8008080 <__malloc_lock>
 8007ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f38 <_free_r+0x90>)
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	b933      	cbnz	r3, 8007ed4 <_free_r+0x2c>
 8007ec6:	6063      	str	r3, [r4, #4]
 8007ec8:	6014      	str	r4, [r2, #0]
 8007eca:	4628      	mov	r0, r5
 8007ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ed0:	f000 b8dc 	b.w	800808c <__malloc_unlock>
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d908      	bls.n	8007eea <_free_r+0x42>
 8007ed8:	6820      	ldr	r0, [r4, #0]
 8007eda:	1821      	adds	r1, r4, r0
 8007edc:	428b      	cmp	r3, r1
 8007ede:	bf01      	itttt	eq
 8007ee0:	6819      	ldreq	r1, [r3, #0]
 8007ee2:	685b      	ldreq	r3, [r3, #4]
 8007ee4:	1809      	addeq	r1, r1, r0
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	e7ed      	b.n	8007ec6 <_free_r+0x1e>
 8007eea:	461a      	mov	r2, r3
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b10b      	cbz	r3, 8007ef4 <_free_r+0x4c>
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d9fa      	bls.n	8007eea <_free_r+0x42>
 8007ef4:	6811      	ldr	r1, [r2, #0]
 8007ef6:	1850      	adds	r0, r2, r1
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	d10b      	bne.n	8007f14 <_free_r+0x6c>
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	4401      	add	r1, r0
 8007f00:	1850      	adds	r0, r2, r1
 8007f02:	4283      	cmp	r3, r0
 8007f04:	6011      	str	r1, [r2, #0]
 8007f06:	d1e0      	bne.n	8007eca <_free_r+0x22>
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	6053      	str	r3, [r2, #4]
 8007f0e:	4408      	add	r0, r1
 8007f10:	6010      	str	r0, [r2, #0]
 8007f12:	e7da      	b.n	8007eca <_free_r+0x22>
 8007f14:	d902      	bls.n	8007f1c <_free_r+0x74>
 8007f16:	230c      	movs	r3, #12
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	e7d6      	b.n	8007eca <_free_r+0x22>
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	1821      	adds	r1, r4, r0
 8007f20:	428b      	cmp	r3, r1
 8007f22:	bf04      	itt	eq
 8007f24:	6819      	ldreq	r1, [r3, #0]
 8007f26:	685b      	ldreq	r3, [r3, #4]
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	bf04      	itt	eq
 8007f2c:	1809      	addeq	r1, r1, r0
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	6054      	str	r4, [r2, #4]
 8007f32:	e7ca      	b.n	8007eca <_free_r+0x22>
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
 8007f36:	bf00      	nop
 8007f38:	20001f44 	.word	0x20001f44

08007f3c <sbrk_aligned>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f7c <sbrk_aligned+0x40>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	6831      	ldr	r1, [r6, #0]
 8007f44:	4605      	mov	r5, r0
 8007f46:	b911      	cbnz	r1, 8007f4e <sbrk_aligned+0x12>
 8007f48:	f000 fb8a 	bl	8008660 <_sbrk_r>
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 fb85 	bl	8008660 <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d103      	bne.n	8007f62 <sbrk_aligned+0x26>
 8007f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5e:	4620      	mov	r0, r4
 8007f60:	bd70      	pop	{r4, r5, r6, pc}
 8007f62:	1cc4      	adds	r4, r0, #3
 8007f64:	f024 0403 	bic.w	r4, r4, #3
 8007f68:	42a0      	cmp	r0, r4
 8007f6a:	d0f8      	beq.n	8007f5e <sbrk_aligned+0x22>
 8007f6c:	1a21      	subs	r1, r4, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 fb76 	bl	8008660 <_sbrk_r>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1f2      	bne.n	8007f5e <sbrk_aligned+0x22>
 8007f78:	e7ef      	b.n	8007f5a <sbrk_aligned+0x1e>
 8007f7a:	bf00      	nop
 8007f7c:	20001f40 	.word	0x20001f40

08007f80 <_malloc_r>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	1ccd      	adds	r5, r1, #3
 8007f86:	f025 0503 	bic.w	r5, r5, #3
 8007f8a:	3508      	adds	r5, #8
 8007f8c:	2d0c      	cmp	r5, #12
 8007f8e:	bf38      	it	cc
 8007f90:	250c      	movcc	r5, #12
 8007f92:	2d00      	cmp	r5, #0
 8007f94:	4606      	mov	r6, r0
 8007f96:	db01      	blt.n	8007f9c <_malloc_r+0x1c>
 8007f98:	42a9      	cmp	r1, r5
 8007f9a:	d904      	bls.n	8007fa6 <_malloc_r+0x26>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	6033      	str	r3, [r6, #0]
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800807c <_malloc_r+0xfc>
 8007faa:	f000 f869 	bl	8008080 <__malloc_lock>
 8007fae:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb2:	461c      	mov	r4, r3
 8007fb4:	bb44      	cbnz	r4, 8008008 <_malloc_r+0x88>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff ffbf 	bl	8007f3c <sbrk_aligned>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	d158      	bne.n	8008076 <_malloc_r+0xf6>
 8007fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc8:	4627      	mov	r7, r4
 8007fca:	2f00      	cmp	r7, #0
 8007fcc:	d143      	bne.n	8008056 <_malloc_r+0xd6>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	d04b      	beq.n	800806a <_malloc_r+0xea>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	eb04 0903 	add.w	r9, r4, r3
 8007fdc:	f000 fb40 	bl	8008660 <_sbrk_r>
 8007fe0:	4581      	cmp	r9, r0
 8007fe2:	d142      	bne.n	800806a <_malloc_r+0xea>
 8007fe4:	6821      	ldr	r1, [r4, #0]
 8007fe6:	1a6d      	subs	r5, r5, r1
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ffa6 	bl	8007f3c <sbrk_aligned>
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d03a      	beq.n	800806a <_malloc_r+0xea>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	442b      	add	r3, r5
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	bb62      	cbnz	r2, 800805c <_malloc_r+0xdc>
 8008002:	f8c8 7000 	str.w	r7, [r8]
 8008006:	e00f      	b.n	8008028 <_malloc_r+0xa8>
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	1b52      	subs	r2, r2, r5
 800800c:	d420      	bmi.n	8008050 <_malloc_r+0xd0>
 800800e:	2a0b      	cmp	r2, #11
 8008010:	d917      	bls.n	8008042 <_malloc_r+0xc2>
 8008012:	1961      	adds	r1, r4, r5
 8008014:	42a3      	cmp	r3, r4
 8008016:	6025      	str	r5, [r4, #0]
 8008018:	bf18      	it	ne
 800801a:	6059      	strne	r1, [r3, #4]
 800801c:	6863      	ldr	r3, [r4, #4]
 800801e:	bf08      	it	eq
 8008020:	f8c8 1000 	streq.w	r1, [r8]
 8008024:	5162      	str	r2, [r4, r5]
 8008026:	604b      	str	r3, [r1, #4]
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f82f 	bl	800808c <__malloc_unlock>
 800802e:	f104 000b 	add.w	r0, r4, #11
 8008032:	1d23      	adds	r3, r4, #4
 8008034:	f020 0007 	bic.w	r0, r0, #7
 8008038:	1ac2      	subs	r2, r0, r3
 800803a:	bf1c      	itt	ne
 800803c:	1a1b      	subne	r3, r3, r0
 800803e:	50a3      	strne	r3, [r4, r2]
 8008040:	e7af      	b.n	8007fa2 <_malloc_r+0x22>
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	42a3      	cmp	r3, r4
 8008046:	bf0c      	ite	eq
 8008048:	f8c8 2000 	streq.w	r2, [r8]
 800804c:	605a      	strne	r2, [r3, #4]
 800804e:	e7eb      	b.n	8008028 <_malloc_r+0xa8>
 8008050:	4623      	mov	r3, r4
 8008052:	6864      	ldr	r4, [r4, #4]
 8008054:	e7ae      	b.n	8007fb4 <_malloc_r+0x34>
 8008056:	463c      	mov	r4, r7
 8008058:	687f      	ldr	r7, [r7, #4]
 800805a:	e7b6      	b.n	8007fca <_malloc_r+0x4a>
 800805c:	461a      	mov	r2, r3
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	42a3      	cmp	r3, r4
 8008062:	d1fb      	bne.n	800805c <_malloc_r+0xdc>
 8008064:	2300      	movs	r3, #0
 8008066:	6053      	str	r3, [r2, #4]
 8008068:	e7de      	b.n	8008028 <_malloc_r+0xa8>
 800806a:	230c      	movs	r3, #12
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	4630      	mov	r0, r6
 8008070:	f000 f80c 	bl	800808c <__malloc_unlock>
 8008074:	e794      	b.n	8007fa0 <_malloc_r+0x20>
 8008076:	6005      	str	r5, [r0, #0]
 8008078:	e7d6      	b.n	8008028 <_malloc_r+0xa8>
 800807a:	bf00      	nop
 800807c:	20001f44 	.word	0x20001f44

08008080 <__malloc_lock>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__malloc_lock+0x8>)
 8008082:	f7ff bf01 	b.w	8007e88 <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	20001f3c 	.word	0x20001f3c

0800808c <__malloc_unlock>:
 800808c:	4801      	ldr	r0, [pc, #4]	@ (8008094 <__malloc_unlock+0x8>)
 800808e:	f7ff befc 	b.w	8007e8a <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	20001f3c 	.word	0x20001f3c

08008098 <__ssputs_r>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	688e      	ldr	r6, [r1, #8]
 800809e:	461f      	mov	r7, r3
 80080a0:	42be      	cmp	r6, r7
 80080a2:	680b      	ldr	r3, [r1, #0]
 80080a4:	4682      	mov	sl, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	4690      	mov	r8, r2
 80080aa:	d82d      	bhi.n	8008108 <__ssputs_r+0x70>
 80080ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080b4:	d026      	beq.n	8008104 <__ssputs_r+0x6c>
 80080b6:	6965      	ldr	r5, [r4, #20]
 80080b8:	6909      	ldr	r1, [r1, #16]
 80080ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080be:	eba3 0901 	sub.w	r9, r3, r1
 80080c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c6:	1c7b      	adds	r3, r7, #1
 80080c8:	444b      	add	r3, r9
 80080ca:	106d      	asrs	r5, r5, #1
 80080cc:	429d      	cmp	r5, r3
 80080ce:	bf38      	it	cc
 80080d0:	461d      	movcc	r5, r3
 80080d2:	0553      	lsls	r3, r2, #21
 80080d4:	d527      	bpl.n	8008126 <__ssputs_r+0x8e>
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7ff ff52 	bl	8007f80 <_malloc_r>
 80080dc:	4606      	mov	r6, r0
 80080de:	b360      	cbz	r0, 800813a <__ssputs_r+0xa2>
 80080e0:	6921      	ldr	r1, [r4, #16]
 80080e2:	464a      	mov	r2, r9
 80080e4:	f7ff fed2 	bl	8007e8c <memcpy>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	6126      	str	r6, [r4, #16]
 80080f6:	6165      	str	r5, [r4, #20]
 80080f8:	444e      	add	r6, r9
 80080fa:	eba5 0509 	sub.w	r5, r5, r9
 80080fe:	6026      	str	r6, [r4, #0]
 8008100:	60a5      	str	r5, [r4, #8]
 8008102:	463e      	mov	r6, r7
 8008104:	42be      	cmp	r6, r7
 8008106:	d900      	bls.n	800810a <__ssputs_r+0x72>
 8008108:	463e      	mov	r6, r7
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	4632      	mov	r2, r6
 800810e:	4641      	mov	r1, r8
 8008110:	f7ff fe6e 	bl	8007df0 <memmove>
 8008114:	68a3      	ldr	r3, [r4, #8]
 8008116:	1b9b      	subs	r3, r3, r6
 8008118:	60a3      	str	r3, [r4, #8]
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	4433      	add	r3, r6
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	2000      	movs	r0, #0
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	462a      	mov	r2, r5
 8008128:	f000 faaa 	bl	8008680 <_realloc_r>
 800812c:	4606      	mov	r6, r0
 800812e:	2800      	cmp	r0, #0
 8008130:	d1e0      	bne.n	80080f4 <__ssputs_r+0x5c>
 8008132:	6921      	ldr	r1, [r4, #16]
 8008134:	4650      	mov	r0, sl
 8008136:	f7ff feb7 	bl	8007ea8 <_free_r>
 800813a:	230c      	movs	r3, #12
 800813c:	f8ca 3000 	str.w	r3, [sl]
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	e7e9      	b.n	8008122 <__ssputs_r+0x8a>
	...

08008150 <_svfiprintf_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	4698      	mov	r8, r3
 8008156:	898b      	ldrh	r3, [r1, #12]
 8008158:	061b      	lsls	r3, r3, #24
 800815a:	b09d      	sub	sp, #116	@ 0x74
 800815c:	4607      	mov	r7, r0
 800815e:	460d      	mov	r5, r1
 8008160:	4614      	mov	r4, r2
 8008162:	d510      	bpl.n	8008186 <_svfiprintf_r+0x36>
 8008164:	690b      	ldr	r3, [r1, #16]
 8008166:	b973      	cbnz	r3, 8008186 <_svfiprintf_r+0x36>
 8008168:	2140      	movs	r1, #64	@ 0x40
 800816a:	f7ff ff09 	bl	8007f80 <_malloc_r>
 800816e:	6028      	str	r0, [r5, #0]
 8008170:	6128      	str	r0, [r5, #16]
 8008172:	b930      	cbnz	r0, 8008182 <_svfiprintf_r+0x32>
 8008174:	230c      	movs	r3, #12
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	b01d      	add	sp, #116	@ 0x74
 800817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008182:	2340      	movs	r3, #64	@ 0x40
 8008184:	616b      	str	r3, [r5, #20]
 8008186:	2300      	movs	r3, #0
 8008188:	9309      	str	r3, [sp, #36]	@ 0x24
 800818a:	2320      	movs	r3, #32
 800818c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008190:	f8cd 800c 	str.w	r8, [sp, #12]
 8008194:	2330      	movs	r3, #48	@ 0x30
 8008196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008334 <_svfiprintf_r+0x1e4>
 800819a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819e:	f04f 0901 	mov.w	r9, #1
 80081a2:	4623      	mov	r3, r4
 80081a4:	469a      	mov	sl, r3
 80081a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081aa:	b10a      	cbz	r2, 80081b0 <_svfiprintf_r+0x60>
 80081ac:	2a25      	cmp	r2, #37	@ 0x25
 80081ae:	d1f9      	bne.n	80081a4 <_svfiprintf_r+0x54>
 80081b0:	ebba 0b04 	subs.w	fp, sl, r4
 80081b4:	d00b      	beq.n	80081ce <_svfiprintf_r+0x7e>
 80081b6:	465b      	mov	r3, fp
 80081b8:	4622      	mov	r2, r4
 80081ba:	4629      	mov	r1, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff ff6b 	bl	8008098 <__ssputs_r>
 80081c2:	3001      	adds	r0, #1
 80081c4:	f000 80a7 	beq.w	8008316 <_svfiprintf_r+0x1c6>
 80081c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ca:	445a      	add	r2, fp
 80081cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 809f 	beq.w	8008316 <_svfiprintf_r+0x1c6>
 80081d8:	2300      	movs	r3, #0
 80081da:	f04f 32ff 	mov.w	r2, #4294967295
 80081de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e2:	f10a 0a01 	add.w	sl, sl, #1
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80081f0:	4654      	mov	r4, sl
 80081f2:	2205      	movs	r2, #5
 80081f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f8:	484e      	ldr	r0, [pc, #312]	@ (8008334 <_svfiprintf_r+0x1e4>)
 80081fa:	f7f7 ffe9 	bl	80001d0 <memchr>
 80081fe:	9a04      	ldr	r2, [sp, #16]
 8008200:	b9d8      	cbnz	r0, 800823a <_svfiprintf_r+0xea>
 8008202:	06d0      	lsls	r0, r2, #27
 8008204:	bf44      	itt	mi
 8008206:	2320      	movmi	r3, #32
 8008208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800820c:	0711      	lsls	r1, r2, #28
 800820e:	bf44      	itt	mi
 8008210:	232b      	movmi	r3, #43	@ 0x2b
 8008212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008216:	f89a 3000 	ldrb.w	r3, [sl]
 800821a:	2b2a      	cmp	r3, #42	@ 0x2a
 800821c:	d015      	beq.n	800824a <_svfiprintf_r+0xfa>
 800821e:	9a07      	ldr	r2, [sp, #28]
 8008220:	4654      	mov	r4, sl
 8008222:	2000      	movs	r0, #0
 8008224:	f04f 0c0a 	mov.w	ip, #10
 8008228:	4621      	mov	r1, r4
 800822a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822e:	3b30      	subs	r3, #48	@ 0x30
 8008230:	2b09      	cmp	r3, #9
 8008232:	d94b      	bls.n	80082cc <_svfiprintf_r+0x17c>
 8008234:	b1b0      	cbz	r0, 8008264 <_svfiprintf_r+0x114>
 8008236:	9207      	str	r2, [sp, #28]
 8008238:	e014      	b.n	8008264 <_svfiprintf_r+0x114>
 800823a:	eba0 0308 	sub.w	r3, r0, r8
 800823e:	fa09 f303 	lsl.w	r3, r9, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	46a2      	mov	sl, r4
 8008248:	e7d2      	b.n	80081f0 <_svfiprintf_r+0xa0>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	9103      	str	r1, [sp, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfbb      	ittet	lt
 8008256:	425b      	neglt	r3, r3
 8008258:	f042 0202 	orrlt.w	r2, r2, #2
 800825c:	9307      	strge	r3, [sp, #28]
 800825e:	9307      	strlt	r3, [sp, #28]
 8008260:	bfb8      	it	lt
 8008262:	9204      	strlt	r2, [sp, #16]
 8008264:	7823      	ldrb	r3, [r4, #0]
 8008266:	2b2e      	cmp	r3, #46	@ 0x2e
 8008268:	d10a      	bne.n	8008280 <_svfiprintf_r+0x130>
 800826a:	7863      	ldrb	r3, [r4, #1]
 800826c:	2b2a      	cmp	r3, #42	@ 0x2a
 800826e:	d132      	bne.n	80082d6 <_svfiprintf_r+0x186>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	9203      	str	r2, [sp, #12]
 8008278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800827c:	3402      	adds	r4, #2
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008344 <_svfiprintf_r+0x1f4>
 8008284:	7821      	ldrb	r1, [r4, #0]
 8008286:	2203      	movs	r2, #3
 8008288:	4650      	mov	r0, sl
 800828a:	f7f7 ffa1 	bl	80001d0 <memchr>
 800828e:	b138      	cbz	r0, 80082a0 <_svfiprintf_r+0x150>
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	eba0 000a 	sub.w	r0, r0, sl
 8008296:	2240      	movs	r2, #64	@ 0x40
 8008298:	4082      	lsls	r2, r0
 800829a:	4313      	orrs	r3, r2
 800829c:	3401      	adds	r4, #1
 800829e:	9304      	str	r3, [sp, #16]
 80082a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a4:	4824      	ldr	r0, [pc, #144]	@ (8008338 <_svfiprintf_r+0x1e8>)
 80082a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082aa:	2206      	movs	r2, #6
 80082ac:	f7f7 ff90 	bl	80001d0 <memchr>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d036      	beq.n	8008322 <_svfiprintf_r+0x1d2>
 80082b4:	4b21      	ldr	r3, [pc, #132]	@ (800833c <_svfiprintf_r+0x1ec>)
 80082b6:	bb1b      	cbnz	r3, 8008300 <_svfiprintf_r+0x1b0>
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	3307      	adds	r3, #7
 80082bc:	f023 0307 	bic.w	r3, r3, #7
 80082c0:	3308      	adds	r3, #8
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c6:	4433      	add	r3, r6
 80082c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ca:	e76a      	b.n	80081a2 <_svfiprintf_r+0x52>
 80082cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d0:	460c      	mov	r4, r1
 80082d2:	2001      	movs	r0, #1
 80082d4:	e7a8      	b.n	8008228 <_svfiprintf_r+0xd8>
 80082d6:	2300      	movs	r3, #0
 80082d8:	3401      	adds	r4, #1
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	4619      	mov	r1, r3
 80082de:	f04f 0c0a 	mov.w	ip, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e8:	3a30      	subs	r2, #48	@ 0x30
 80082ea:	2a09      	cmp	r2, #9
 80082ec:	d903      	bls.n	80082f6 <_svfiprintf_r+0x1a6>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c6      	beq.n	8008280 <_svfiprintf_r+0x130>
 80082f2:	9105      	str	r1, [sp, #20]
 80082f4:	e7c4      	b.n	8008280 <_svfiprintf_r+0x130>
 80082f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082fa:	4604      	mov	r4, r0
 80082fc:	2301      	movs	r3, #1
 80082fe:	e7f0      	b.n	80082e2 <_svfiprintf_r+0x192>
 8008300:	ab03      	add	r3, sp, #12
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	462a      	mov	r2, r5
 8008306:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <_svfiprintf_r+0x1f0>)
 8008308:	a904      	add	r1, sp, #16
 800830a:	4638      	mov	r0, r7
 800830c:	f3af 8000 	nop.w
 8008310:	1c42      	adds	r2, r0, #1
 8008312:	4606      	mov	r6, r0
 8008314:	d1d6      	bne.n	80082c4 <_svfiprintf_r+0x174>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	065b      	lsls	r3, r3, #25
 800831a:	f53f af2d 	bmi.w	8008178 <_svfiprintf_r+0x28>
 800831e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008320:	e72c      	b.n	800817c <_svfiprintf_r+0x2c>
 8008322:	ab03      	add	r3, sp, #12
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	462a      	mov	r2, r5
 8008328:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <_svfiprintf_r+0x1f0>)
 800832a:	a904      	add	r1, sp, #16
 800832c:	4638      	mov	r0, r7
 800832e:	f000 f879 	bl	8008424 <_printf_i>
 8008332:	e7ed      	b.n	8008310 <_svfiprintf_r+0x1c0>
 8008334:	08008788 	.word	0x08008788
 8008338:	08008792 	.word	0x08008792
 800833c:	00000000 	.word	0x00000000
 8008340:	08008099 	.word	0x08008099
 8008344:	0800878e 	.word	0x0800878e

08008348 <_printf_common>:
 8008348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800834c:	4616      	mov	r6, r2
 800834e:	4698      	mov	r8, r3
 8008350:	688a      	ldr	r2, [r1, #8]
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008358:	4293      	cmp	r3, r2
 800835a:	bfb8      	it	lt
 800835c:	4613      	movlt	r3, r2
 800835e:	6033      	str	r3, [r6, #0]
 8008360:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008364:	4607      	mov	r7, r0
 8008366:	460c      	mov	r4, r1
 8008368:	b10a      	cbz	r2, 800836e <_printf_common+0x26>
 800836a:	3301      	adds	r3, #1
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	0699      	lsls	r1, r3, #26
 8008372:	bf42      	ittt	mi
 8008374:	6833      	ldrmi	r3, [r6, #0]
 8008376:	3302      	addmi	r3, #2
 8008378:	6033      	strmi	r3, [r6, #0]
 800837a:	6825      	ldr	r5, [r4, #0]
 800837c:	f015 0506 	ands.w	r5, r5, #6
 8008380:	d106      	bne.n	8008390 <_printf_common+0x48>
 8008382:	f104 0a19 	add.w	sl, r4, #25
 8008386:	68e3      	ldr	r3, [r4, #12]
 8008388:	6832      	ldr	r2, [r6, #0]
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	42ab      	cmp	r3, r5
 800838e:	dc26      	bgt.n	80083de <_printf_common+0x96>
 8008390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008394:	6822      	ldr	r2, [r4, #0]
 8008396:	3b00      	subs	r3, #0
 8008398:	bf18      	it	ne
 800839a:	2301      	movne	r3, #1
 800839c:	0692      	lsls	r2, r2, #26
 800839e:	d42b      	bmi.n	80083f8 <_printf_common+0xb0>
 80083a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083a4:	4641      	mov	r1, r8
 80083a6:	4638      	mov	r0, r7
 80083a8:	47c8      	blx	r9
 80083aa:	3001      	adds	r0, #1
 80083ac:	d01e      	beq.n	80083ec <_printf_common+0xa4>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	f003 0306 	and.w	r3, r3, #6
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	bf02      	ittt	eq
 80083ba:	68e5      	ldreq	r5, [r4, #12]
 80083bc:	6833      	ldreq	r3, [r6, #0]
 80083be:	1aed      	subeq	r5, r5, r3
 80083c0:	68a3      	ldr	r3, [r4, #8]
 80083c2:	bf0c      	ite	eq
 80083c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083c8:	2500      	movne	r5, #0
 80083ca:	4293      	cmp	r3, r2
 80083cc:	bfc4      	itt	gt
 80083ce:	1a9b      	subgt	r3, r3, r2
 80083d0:	18ed      	addgt	r5, r5, r3
 80083d2:	2600      	movs	r6, #0
 80083d4:	341a      	adds	r4, #26
 80083d6:	42b5      	cmp	r5, r6
 80083d8:	d11a      	bne.n	8008410 <_printf_common+0xc8>
 80083da:	2000      	movs	r0, #0
 80083dc:	e008      	b.n	80083f0 <_printf_common+0xa8>
 80083de:	2301      	movs	r3, #1
 80083e0:	4652      	mov	r2, sl
 80083e2:	4641      	mov	r1, r8
 80083e4:	4638      	mov	r0, r7
 80083e6:	47c8      	blx	r9
 80083e8:	3001      	adds	r0, #1
 80083ea:	d103      	bne.n	80083f4 <_printf_common+0xac>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f4:	3501      	adds	r5, #1
 80083f6:	e7c6      	b.n	8008386 <_printf_common+0x3e>
 80083f8:	18e1      	adds	r1, r4, r3
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	2030      	movs	r0, #48	@ 0x30
 80083fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008402:	4422      	add	r2, r4
 8008404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008408:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800840c:	3302      	adds	r3, #2
 800840e:	e7c7      	b.n	80083a0 <_printf_common+0x58>
 8008410:	2301      	movs	r3, #1
 8008412:	4622      	mov	r2, r4
 8008414:	4641      	mov	r1, r8
 8008416:	4638      	mov	r0, r7
 8008418:	47c8      	blx	r9
 800841a:	3001      	adds	r0, #1
 800841c:	d0e6      	beq.n	80083ec <_printf_common+0xa4>
 800841e:	3601      	adds	r6, #1
 8008420:	e7d9      	b.n	80083d6 <_printf_common+0x8e>
	...

08008424 <_printf_i>:
 8008424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008428:	7e0f      	ldrb	r7, [r1, #24]
 800842a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800842c:	2f78      	cmp	r7, #120	@ 0x78
 800842e:	4691      	mov	r9, r2
 8008430:	4680      	mov	r8, r0
 8008432:	460c      	mov	r4, r1
 8008434:	469a      	mov	sl, r3
 8008436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800843a:	d807      	bhi.n	800844c <_printf_i+0x28>
 800843c:	2f62      	cmp	r7, #98	@ 0x62
 800843e:	d80a      	bhi.n	8008456 <_printf_i+0x32>
 8008440:	2f00      	cmp	r7, #0
 8008442:	f000 80d1 	beq.w	80085e8 <_printf_i+0x1c4>
 8008446:	2f58      	cmp	r7, #88	@ 0x58
 8008448:	f000 80b8 	beq.w	80085bc <_printf_i+0x198>
 800844c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008454:	e03a      	b.n	80084cc <_printf_i+0xa8>
 8008456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800845a:	2b15      	cmp	r3, #21
 800845c:	d8f6      	bhi.n	800844c <_printf_i+0x28>
 800845e:	a101      	add	r1, pc, #4	@ (adr r1, 8008464 <_printf_i+0x40>)
 8008460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008464:	080084bd 	.word	0x080084bd
 8008468:	080084d1 	.word	0x080084d1
 800846c:	0800844d 	.word	0x0800844d
 8008470:	0800844d 	.word	0x0800844d
 8008474:	0800844d 	.word	0x0800844d
 8008478:	0800844d 	.word	0x0800844d
 800847c:	080084d1 	.word	0x080084d1
 8008480:	0800844d 	.word	0x0800844d
 8008484:	0800844d 	.word	0x0800844d
 8008488:	0800844d 	.word	0x0800844d
 800848c:	0800844d 	.word	0x0800844d
 8008490:	080085cf 	.word	0x080085cf
 8008494:	080084fb 	.word	0x080084fb
 8008498:	08008589 	.word	0x08008589
 800849c:	0800844d 	.word	0x0800844d
 80084a0:	0800844d 	.word	0x0800844d
 80084a4:	080085f1 	.word	0x080085f1
 80084a8:	0800844d 	.word	0x0800844d
 80084ac:	080084fb 	.word	0x080084fb
 80084b0:	0800844d 	.word	0x0800844d
 80084b4:	0800844d 	.word	0x0800844d
 80084b8:	08008591 	.word	0x08008591
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	1d1a      	adds	r2, r3, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6032      	str	r2, [r6, #0]
 80084c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084cc:	2301      	movs	r3, #1
 80084ce:	e09c      	b.n	800860a <_printf_i+0x1e6>
 80084d0:	6833      	ldr	r3, [r6, #0]
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	1d19      	adds	r1, r3, #4
 80084d6:	6031      	str	r1, [r6, #0]
 80084d8:	0606      	lsls	r6, r0, #24
 80084da:	d501      	bpl.n	80084e0 <_printf_i+0xbc>
 80084dc:	681d      	ldr	r5, [r3, #0]
 80084de:	e003      	b.n	80084e8 <_printf_i+0xc4>
 80084e0:	0645      	lsls	r5, r0, #25
 80084e2:	d5fb      	bpl.n	80084dc <_printf_i+0xb8>
 80084e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	da03      	bge.n	80084f4 <_printf_i+0xd0>
 80084ec:	232d      	movs	r3, #45	@ 0x2d
 80084ee:	426d      	negs	r5, r5
 80084f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084f4:	4858      	ldr	r0, [pc, #352]	@ (8008658 <_printf_i+0x234>)
 80084f6:	230a      	movs	r3, #10
 80084f8:	e011      	b.n	800851e <_printf_i+0xfa>
 80084fa:	6821      	ldr	r1, [r4, #0]
 80084fc:	6833      	ldr	r3, [r6, #0]
 80084fe:	0608      	lsls	r0, r1, #24
 8008500:	f853 5b04 	ldr.w	r5, [r3], #4
 8008504:	d402      	bmi.n	800850c <_printf_i+0xe8>
 8008506:	0649      	lsls	r1, r1, #25
 8008508:	bf48      	it	mi
 800850a:	b2ad      	uxthmi	r5, r5
 800850c:	2f6f      	cmp	r7, #111	@ 0x6f
 800850e:	4852      	ldr	r0, [pc, #328]	@ (8008658 <_printf_i+0x234>)
 8008510:	6033      	str	r3, [r6, #0]
 8008512:	bf14      	ite	ne
 8008514:	230a      	movne	r3, #10
 8008516:	2308      	moveq	r3, #8
 8008518:	2100      	movs	r1, #0
 800851a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800851e:	6866      	ldr	r6, [r4, #4]
 8008520:	60a6      	str	r6, [r4, #8]
 8008522:	2e00      	cmp	r6, #0
 8008524:	db05      	blt.n	8008532 <_printf_i+0x10e>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	432e      	orrs	r6, r5
 800852a:	f021 0104 	bic.w	r1, r1, #4
 800852e:	6021      	str	r1, [r4, #0]
 8008530:	d04b      	beq.n	80085ca <_printf_i+0x1a6>
 8008532:	4616      	mov	r6, r2
 8008534:	fbb5 f1f3 	udiv	r1, r5, r3
 8008538:	fb03 5711 	mls	r7, r3, r1, r5
 800853c:	5dc7      	ldrb	r7, [r0, r7]
 800853e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008542:	462f      	mov	r7, r5
 8008544:	42bb      	cmp	r3, r7
 8008546:	460d      	mov	r5, r1
 8008548:	d9f4      	bls.n	8008534 <_printf_i+0x110>
 800854a:	2b08      	cmp	r3, #8
 800854c:	d10b      	bne.n	8008566 <_printf_i+0x142>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	07df      	lsls	r7, r3, #31
 8008552:	d508      	bpl.n	8008566 <_printf_i+0x142>
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	6861      	ldr	r1, [r4, #4]
 8008558:	4299      	cmp	r1, r3
 800855a:	bfde      	ittt	le
 800855c:	2330      	movle	r3, #48	@ 0x30
 800855e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008562:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008566:	1b92      	subs	r2, r2, r6
 8008568:	6122      	str	r2, [r4, #16]
 800856a:	f8cd a000 	str.w	sl, [sp]
 800856e:	464b      	mov	r3, r9
 8008570:	aa03      	add	r2, sp, #12
 8008572:	4621      	mov	r1, r4
 8008574:	4640      	mov	r0, r8
 8008576:	f7ff fee7 	bl	8008348 <_printf_common>
 800857a:	3001      	adds	r0, #1
 800857c:	d14a      	bne.n	8008614 <_printf_i+0x1f0>
 800857e:	f04f 30ff 	mov.w	r0, #4294967295
 8008582:	b004      	add	sp, #16
 8008584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	f043 0320 	orr.w	r3, r3, #32
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	4832      	ldr	r0, [pc, #200]	@ (800865c <_printf_i+0x238>)
 8008592:	2778      	movs	r7, #120	@ 0x78
 8008594:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	6831      	ldr	r1, [r6, #0]
 800859c:	061f      	lsls	r7, r3, #24
 800859e:	f851 5b04 	ldr.w	r5, [r1], #4
 80085a2:	d402      	bmi.n	80085aa <_printf_i+0x186>
 80085a4:	065f      	lsls	r7, r3, #25
 80085a6:	bf48      	it	mi
 80085a8:	b2ad      	uxthmi	r5, r5
 80085aa:	6031      	str	r1, [r6, #0]
 80085ac:	07d9      	lsls	r1, r3, #31
 80085ae:	bf44      	itt	mi
 80085b0:	f043 0320 	orrmi.w	r3, r3, #32
 80085b4:	6023      	strmi	r3, [r4, #0]
 80085b6:	b11d      	cbz	r5, 80085c0 <_printf_i+0x19c>
 80085b8:	2310      	movs	r3, #16
 80085ba:	e7ad      	b.n	8008518 <_printf_i+0xf4>
 80085bc:	4826      	ldr	r0, [pc, #152]	@ (8008658 <_printf_i+0x234>)
 80085be:	e7e9      	b.n	8008594 <_printf_i+0x170>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	f023 0320 	bic.w	r3, r3, #32
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	e7f6      	b.n	80085b8 <_printf_i+0x194>
 80085ca:	4616      	mov	r6, r2
 80085cc:	e7bd      	b.n	800854a <_printf_i+0x126>
 80085ce:	6833      	ldr	r3, [r6, #0]
 80085d0:	6825      	ldr	r5, [r4, #0]
 80085d2:	6961      	ldr	r1, [r4, #20]
 80085d4:	1d18      	adds	r0, r3, #4
 80085d6:	6030      	str	r0, [r6, #0]
 80085d8:	062e      	lsls	r6, r5, #24
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	d501      	bpl.n	80085e2 <_printf_i+0x1be>
 80085de:	6019      	str	r1, [r3, #0]
 80085e0:	e002      	b.n	80085e8 <_printf_i+0x1c4>
 80085e2:	0668      	lsls	r0, r5, #25
 80085e4:	d5fb      	bpl.n	80085de <_printf_i+0x1ba>
 80085e6:	8019      	strh	r1, [r3, #0]
 80085e8:	2300      	movs	r3, #0
 80085ea:	6123      	str	r3, [r4, #16]
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bc      	b.n	800856a <_printf_i+0x146>
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	6032      	str	r2, [r6, #0]
 80085f6:	681e      	ldr	r6, [r3, #0]
 80085f8:	6862      	ldr	r2, [r4, #4]
 80085fa:	2100      	movs	r1, #0
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7f7 fde7 	bl	80001d0 <memchr>
 8008602:	b108      	cbz	r0, 8008608 <_printf_i+0x1e4>
 8008604:	1b80      	subs	r0, r0, r6
 8008606:	6060      	str	r0, [r4, #4]
 8008608:	6863      	ldr	r3, [r4, #4]
 800860a:	6123      	str	r3, [r4, #16]
 800860c:	2300      	movs	r3, #0
 800860e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008612:	e7aa      	b.n	800856a <_printf_i+0x146>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	4632      	mov	r2, r6
 8008618:	4649      	mov	r1, r9
 800861a:	4640      	mov	r0, r8
 800861c:	47d0      	blx	sl
 800861e:	3001      	adds	r0, #1
 8008620:	d0ad      	beq.n	800857e <_printf_i+0x15a>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	079b      	lsls	r3, r3, #30
 8008626:	d413      	bmi.n	8008650 <_printf_i+0x22c>
 8008628:	68e0      	ldr	r0, [r4, #12]
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	4298      	cmp	r0, r3
 800862e:	bfb8      	it	lt
 8008630:	4618      	movlt	r0, r3
 8008632:	e7a6      	b.n	8008582 <_printf_i+0x15e>
 8008634:	2301      	movs	r3, #1
 8008636:	4632      	mov	r2, r6
 8008638:	4649      	mov	r1, r9
 800863a:	4640      	mov	r0, r8
 800863c:	47d0      	blx	sl
 800863e:	3001      	adds	r0, #1
 8008640:	d09d      	beq.n	800857e <_printf_i+0x15a>
 8008642:	3501      	adds	r5, #1
 8008644:	68e3      	ldr	r3, [r4, #12]
 8008646:	9903      	ldr	r1, [sp, #12]
 8008648:	1a5b      	subs	r3, r3, r1
 800864a:	42ab      	cmp	r3, r5
 800864c:	dcf2      	bgt.n	8008634 <_printf_i+0x210>
 800864e:	e7eb      	b.n	8008628 <_printf_i+0x204>
 8008650:	2500      	movs	r5, #0
 8008652:	f104 0619 	add.w	r6, r4, #25
 8008656:	e7f5      	b.n	8008644 <_printf_i+0x220>
 8008658:	08008799 	.word	0x08008799
 800865c:	080087aa 	.word	0x080087aa

08008660 <_sbrk_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d06      	ldr	r5, [pc, #24]	@ (800867c <_sbrk_r+0x1c>)
 8008664:	2300      	movs	r3, #0
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f8 faf2 	bl	8000c54 <_sbrk>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_sbrk_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_sbrk_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20001f38 	.word	0x20001f38

08008680 <_realloc_r>:
 8008680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008684:	4607      	mov	r7, r0
 8008686:	4614      	mov	r4, r2
 8008688:	460d      	mov	r5, r1
 800868a:	b921      	cbnz	r1, 8008696 <_realloc_r+0x16>
 800868c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008690:	4611      	mov	r1, r2
 8008692:	f7ff bc75 	b.w	8007f80 <_malloc_r>
 8008696:	b92a      	cbnz	r2, 80086a4 <_realloc_r+0x24>
 8008698:	f7ff fc06 	bl	8007ea8 <_free_r>
 800869c:	4625      	mov	r5, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	f000 f81a 	bl	80086dc <_malloc_usable_size_r>
 80086a8:	4284      	cmp	r4, r0
 80086aa:	4606      	mov	r6, r0
 80086ac:	d802      	bhi.n	80086b4 <_realloc_r+0x34>
 80086ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086b2:	d8f4      	bhi.n	800869e <_realloc_r+0x1e>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7ff fc62 	bl	8007f80 <_malloc_r>
 80086bc:	4680      	mov	r8, r0
 80086be:	b908      	cbnz	r0, 80086c4 <_realloc_r+0x44>
 80086c0:	4645      	mov	r5, r8
 80086c2:	e7ec      	b.n	800869e <_realloc_r+0x1e>
 80086c4:	42b4      	cmp	r4, r6
 80086c6:	4622      	mov	r2, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	bf28      	it	cs
 80086cc:	4632      	movcs	r2, r6
 80086ce:	f7ff fbdd 	bl	8007e8c <memcpy>
 80086d2:	4629      	mov	r1, r5
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff fbe7 	bl	8007ea8 <_free_r>
 80086da:	e7f1      	b.n	80086c0 <_realloc_r+0x40>

080086dc <_malloc_usable_size_r>:
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f18      	subs	r0, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfbc      	itt	lt
 80086e6:	580b      	ldrlt	r3, [r1, r0]
 80086e8:	18c0      	addlt	r0, r0, r3
 80086ea:	4770      	bx	lr

080086ec <_init>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr

080086f8 <_fini>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr
